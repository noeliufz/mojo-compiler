PROCEDURE OrBranch.Or
# Trees:
BEQ(
 TEMP OrBranch.Or.x,
 CONST 0,
 L.3, L.1),
LABEL L.3,
BEQ(
 TEMP OrBranch.Or.y,
 CONST 0,
 L.2, L.1),
LABEL L.1,
MOVE(
 TEMP %rax,
 CONST 0),
JUMP(
 NAME L.0),
LABEL L.2,
MOVE(
 TEMP %rax,
 CONST 1),
JUMP(
 NAME L.0),
LABEL L.0
# Linearized (trees):
BEQ(
 TEMP OrBranch.Or.x,
 CONST 0,
 L.3, L.1)
LABEL L.3
BEQ(
 TEMP OrBranch.Or.y,
 CONST 0,
 L.2, L.1)
LABEL L.1
MOVE(
 TEMP %rax,
 CONST 0)
JUMP(
 NAME L.0)
LABEL L.2
MOVE(
 TEMP %rax,
 CONST 1)
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.4
BEQ(
 TEMP OrBranch.Or.x,
 CONST 0,
 L.3, L.1)
# 1
LABEL L.3
BEQ(
 TEMP OrBranch.Or.y,
 CONST 0,
 L.2, L.1)
# 2
LABEL L.1
MOVE(
 TEMP %rax,
 CONST 0)
JUMP(
 NAME L.0)
# 3
LABEL L.2
MOVE(
 TEMP %rax,
 CONST 1)
JUMP(
 NAME L.0)
# 4
LABEL L.0
# Trace Scheduled:
LABEL L.4
BEQ(
 TEMP OrBranch.Or.x,
 CONST 0,
 L.3, L.1)
LABEL L.1
MOVE(
 TEMP %rax,
 CONST 0)
JUMP(
 NAME L.0)
LABEL L.3
BNE(
 TEMP OrBranch.Or.y,
 CONST 0,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 CONST 1)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP OrBranch.Or.y,
 TEMP %rsi)
MOVE(
 TEMP OrBranch.Or.x,
 TEMP %rdi)
LABEL L.4
BEQ(
 TEMP OrBranch.Or.x,
 CONST 0,
 L.3, L.1)
LABEL L.1
MOVE(
 TEMP %rax,
 CONST 0)
JUMP(
 NAME L.0)
LABEL L.3
BNE(
 TEMP OrBranch.Or.y,
 CONST 0,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 CONST 1)
LABEL L.0
# Instructions:
	movq %rsi,OrBranch.Or.y	# OrBranch.Or.y := %rsi 
	movq %rdi,OrBranch.Or.x	# OrBranch.Or.x := %rdi 
L.4:	# <- 
	xorq t.0,t.0	# t.0 <- 
	cmpq t.0,OrBranch.Or.x	# <- OrBranch.Or.x t.0 
	je L.3	# <- : goto L.3 L.1 
L.1:	# <- 
	xorq %rax,%rax	# %rax <- 
	jmp L.0	# <- : goto L.0 
L.3:	# <- 
	xorq t.1,t.1	# t.1 <- 
	cmpq t.1,OrBranch.Or.y	# <- OrBranch.Or.y t.1 
	jne L.1	# <- : goto L.1 L.2 
L.2:	# <- 
	movq $1,%rax	# %rax <- 
L.0:	# <- 
# Control Flow Graph:
0: OrBranch.Or.y OrBranch.Or.x <- %rsi %rdi; goto 1
1: t.0 <- OrBranch.Or.x; goto 3 2
2: %rax <-; goto 5
3: t.1 <- OrBranch.Or.y; goto 2 4
4: %rax <-; goto 5
5: <- %rsp %rbp %rax; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
OrBranch.Or.y: OrBranch.Or.x %rsp %rbp %rdi t.0 t.1 
OrBranch.Or.x: OrBranch.Or.y %rsp %rbp t.0 
t.0: OrBranch.Or.y %rsp %rbp OrBranch.Or.x 
t.1: %rsp %rbp OrBranch.Or.y 
OrBranch.Or.y <= %rsi
OrBranch.Or.x <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
OrBranch.Or.y->%rcx
OrBranch.Or.x->%rbx
t.0->%rax
t.1->%rax
# Assembly code:
	.text
OrBranch.Or:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rsi,%rcx
	movq %rdi,%rbx
L.4:
	xorq %rax,%rax
	cmpq %rax,%rbx
	je L.3
L.1:
	xorq %rax,%rax
	jmp L.0
L.3:
	xorq %rax,%rax
	cmpq %rax,%rcx
	jne L.1
L.2:
	movq $1,%rax
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END OrBranch.Or
PROCEDURE OrBranch
# Trees:
# Linearized (trees):
# Basic Blocks:
# 0
LABEL L.5
# Trace Scheduled:
LABEL L.5
# With procedure entry/exit:
LABEL L.5
# Instructions:
L.5:	# <- 
# Control Flow Graph:
0: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
OrBranch:
	pushq %rbp
	movq %rsp,%rbp
L.5:
#	returnSink
	popq %rbp
	ret
END OrBranch
