proc putchar(i: int): int;
proc getchar(): int;
proc exit(status: int);

const N: int = 7;

proc fib(n: int): int {
  if n < 2 then return n;
  return fib(n-1) + fib(n-2);
}

proc pow(x: int; n: int): int {
  if n == 0 then {
    return 1;
  } else if n % 2 == 0 then {
    return pow(x*x, n/2);
  } else {
    var y = (n-1)/2;
    return x * pow(x*x, y);
  }
  return -1;
}

proc read_number(): int {
  var n: int = 0;
  loop {
    var c: int = getchar();
    if c == Ord('\n') || c == Ord('\r') then break;
    n = n * 10 + (c - Ord('0'));
  }
  return n;
}

proc print_number(num: int) {
  var n: int = num;
  var i: int = 0;
  loop {
    n = n / 10;
    i = i + 1;
  } until n == 0;
  loop {
    var j = 0;
    loop { break; }
    n = num;
    i = i - 1;
    while j != i loop {
      j = j + 1;
      n = n / 10;
    }
    putchar(n%10 + Ord('0'));
  } until i == 0;
  putchar(Ord('\n'));
}

proc exit_print() {
  putchar(Ord('\n'));
  putchar(Ord('E'));
  putchar(Ord('x'));
  putchar(Ord('i'));
  putchar(Ord('t'));
  putchar(Ord('i'));
  putchar(Ord('n'));
  putchar(Ord('g'));
  putchar(Ord('.'));
  putchar(Ord('.'));
  putchar(Ord('.'));
  putchar(Ord('\n'));
  exit(0);
}

{
  var N: int = read_number();
  print_number(fib(N));
  exit_print();
}
