	.data
	.balign 8
ArrayIndexFixed.x:
	.zero 80
PROCEDURE ArrayIndexFixed
# Trees:
MOVE(
 TEMP ArrayIndexFixed.1.v,
 MEM(
  NAME ArrayIndexFixed.x, 
  CONST 40, 8, true, false))
# Linearized (trees):
MOVE(
 TEMP ArrayIndexFixed.1.v,
 MEM(
  NAME ArrayIndexFixed.x, 
  CONST 40, 8, true, false))
# Basic Blocks:
# 0
LABEL L.0
MOVE(
 TEMP ArrayIndexFixed.1.v,
 MEM(
  NAME ArrayIndexFixed.x, 
  CONST 40, 8, true, false))
# Trace Scheduled:
LABEL L.0
MOVE(
 TEMP ArrayIndexFixed.1.v,
 MEM(
  NAME ArrayIndexFixed.x, 
  CONST 40, 8, true, false))
# With procedure entry/exit:
LABEL L.0
MOVE(
 TEMP ArrayIndexFixed.1.v,
 MEM(
  NAME ArrayIndexFixed.x, 
  CONST 40, 8, true, false))
# Instructions:
L.0:	# <- 
	leaq ArrayIndexFixed.x(%rip),t.0	# t.0 <- 
	movq 40(t.0),t.1	# t.1 <- t.0 
	movq t.1,ArrayIndexFixed.1.v	# ArrayIndexFixed.1.v := t.1 
# Control Flow Graph:
0: t.0 t.1 ArrayIndexFixed.1.v <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.0: %rsp %rbp 
t.1: %rsp %rbp 
ArrayIndexFixed.1.v: %rsp %rbp 
ArrayIndexFixed.1.v <= t.1
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.0->%rax
t.1->%rax
ArrayIndexFixed.1.v->%rax
# Assembly code:
	.text
ArrayIndexFixed:
	pushq %rbp
	movq %rsp,%rbp
L.0:
	leaq ArrayIndexFixed.x(%rip),%rax
	movq 40(%rax),%rax
#	movq %rax,%rax
#	returnSink
	popq %rbp
	ret
ArrayIndexFixed.badSub:
	call badSub
END ArrayIndexFixed
