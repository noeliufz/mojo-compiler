PROCEDURE BadReturn2.foo
# Trees:
LABEL L.0
# Linearized (trees):
LABEL L.0
# Basic Blocks:
# 0
LABEL L.0
# Trace Scheduled:
LABEL L.0
# With procedure entry/exit:
LABEL L.0
# Instructions:
L.0:	# <- 
# Control Flow Graph:
0: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
BadReturn2.foo:
	pushq %rbp
	movq %rsp,%rbp
L.0:
#	returnSink
	popq %rbp
	ret
END BadReturn2.foo
PROCEDURE BadReturn2
# Trees:
# Linearized (trees):
# Basic Blocks:
# 0
LABEL L.1
# Trace Scheduled:
LABEL L.1
# With procedure entry/exit:
LABEL L.1
# Instructions:
L.1:	# <- 
# Control Flow Graph:
0: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
BadReturn2:
	pushq %rbp
	movq %rsp,%rbp
L.1:
#	returnSink
	popq %rbp
	ret
END BadReturn2
