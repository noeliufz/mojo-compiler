PROCEDURE BreakNested
# Trees:
LABEL L.0,
LABEL L.1,
LABEL L.3,
LABEL L.4,
JUMP(
 NAME L.5),
JUMP(
 NAME L.3),
LABEL L.5,
JUMP(
 NAME L.2),
JUMP(
 NAME L.0),
LABEL L.2
# Linearized (trees):
LABEL L.0
LABEL L.1
LABEL L.3
LABEL L.4
JUMP(
 NAME L.5)
JUMP(
 NAME L.3)
LABEL L.5
JUMP(
 NAME L.2)
JUMP(
 NAME L.0)
LABEL L.2
# Basic Blocks:
# 0
LABEL L.0
JUMP(
 NAME L.1)
# 1
LABEL L.1
JUMP(
 NAME L.3)
# 2
LABEL L.3
JUMP(
 NAME L.4)
# 3
LABEL L.4
JUMP(
 NAME L.5)
# 4
LABEL L.6
JUMP(
 NAME L.3)
# 5
LABEL L.5
JUMP(
 NAME L.2)
# 6
LABEL L.7
JUMP(
 NAME L.0)
# 7
LABEL L.2
# Trace Scheduled:
LABEL L.0
LABEL L.1
LABEL L.3
LABEL L.4
LABEL L.5
JUMP(
 NAME L.2)
LABEL L.6
JUMP(
 NAME L.3)
LABEL L.7
JUMP(
 NAME L.0)
LABEL L.2
# With procedure entry/exit:
LABEL L.0
LABEL L.1
LABEL L.3
LABEL L.4
LABEL L.5
JUMP(
 NAME L.2)
LABEL L.6
JUMP(
 NAME L.3)
LABEL L.7
JUMP(
 NAME L.0)
LABEL L.2
# Instructions:
L.0:	# <- 
L.1:	# <- 
L.3:	# <- 
L.4:	# <- 
L.5:	# <- 
	jmp L.2	# <- : goto L.2 
L.6:	# <- 
	jmp L.3	# <- : goto L.3 
L.7:	# <- 
	jmp L.0	# <- : goto L.0 
L.2:	# <- 
# Control Flow Graph:
0: <-; goto 3
1: <-; goto 0
2: <-; goto 0
3: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
BreakNested:
	pushq %rbp
	movq %rsp,%rbp
L.0:
L.1:
L.3:
L.4:
L.5:
	jmp L.2
L.6:
	jmp L.3
L.7:
	jmp L.0
L.2:
#	returnSink
	popq %rbp
	ret
END BreakNested
