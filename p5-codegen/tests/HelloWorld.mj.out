PROCEDURE HelloWorld.println
# Trees:
MOVE(
 TEMP HelloWorld.println.1.x,
 TEMP HelloWorld.println.s),
EXP(
 CALL(
  NAME puts,
  CONST 0,
  ESEQ(
   MOVE(
    TEMP t.3,
    ESEQ(
     MOVE(
      TEMP t.1,
      TEMP HelloWorld.println.1.x),
     BEQ(
      TEMP t.1,
      CONST 0,
      HelloWorld.println.badPtr, L.3),
     LABEL L.3,
     TEMP t.1)),
   ADD(
    MEM(
     TEMP t.3, 
     CONST 0, 8, false, false),
    ESEQ(
     MOVE(
      TEMP t.2,
      CONST 0),
     BLT(
      TEMP t.2,
      CONST 0,
      HelloWorld.println.badSub, L.4),
     LABEL L.4,
     BGE(
      TEMP t.2,
      MEM(
       TEMP t.3, 
       CONST 8, 8, false, false),
      HelloWorld.println.badSub, L.5),
     LABEL L.5,
     TEMP t.2))))),
LABEL L.0
# Linearized (trees):
MOVE(
 TEMP HelloWorld.println.1.x,
 TEMP HelloWorld.println.s)
MOVE(
 TEMP t.1,
 TEMP HelloWorld.println.1.x)
BEQ(
 TEMP t.1,
 CONST 0,
 HelloWorld.println.badPtr, L.3)
LABEL L.3
MOVE(
 TEMP t.3,
 TEMP t.1)
MOVE(
 TEMP t.2,
 CONST 0)
BLT(
 TEMP t.2,
 CONST 0,
 HelloWorld.println.badSub, L.4)
LABEL L.4
BGE(
 TEMP t.2,
 MEM(
  TEMP t.3, 
  CONST 8, 8, false, false),
 HelloWorld.println.badSub, L.5)
LABEL L.5
MOVE(
 TEMP t.4,
 CALL(
  NAME puts,
  CONST 0,
  ADD(
   MEM(
    TEMP t.3, 
    CONST 0, 8, false, false),
   TEMP t.2)))
EXP(
 TEMP t.4)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.8
MOVE(
 TEMP HelloWorld.println.1.x,
 TEMP HelloWorld.println.s)
MOVE(
 TEMP t.1,
 TEMP HelloWorld.println.1.x)
BEQ(
 TEMP t.1,
 CONST 0,
 HelloWorld.println.badPtr, L.3)
# 1
LABEL L.3
MOVE(
 TEMP t.3,
 TEMP t.1)
MOVE(
 TEMP t.2,
 CONST 0)
BLT(
 TEMP t.2,
 CONST 0,
 HelloWorld.println.badSub, L.4)
# 2
LABEL L.4
BGE(
 TEMP t.2,
 MEM(
  TEMP t.3, 
  CONST 8, 8, false, false),
 HelloWorld.println.badSub, L.5)
# 3
LABEL L.5
MOVE(
 TEMP t.4,
 CALL(
  NAME puts,
  CONST 0,
  ADD(
   MEM(
    TEMP t.3, 
    CONST 0, 8, false, false),
   TEMP t.2)))
EXP(
 TEMP t.4)
JUMP(
 NAME L.0)
# 4
LABEL L.0
# Trace Scheduled:
LABEL L.8
MOVE(
 TEMP HelloWorld.println.1.x,
 TEMP HelloWorld.println.s)
MOVE(
 TEMP t.1,
 TEMP HelloWorld.println.1.x)
BEQ(
 TEMP t.1,
 CONST 0,
 HelloWorld.println.badPtr, L.3)
LABEL L.3
MOVE(
 TEMP t.3,
 TEMP t.1)
MOVE(
 TEMP t.2,
 CONST 0)
BLT(
 TEMP t.2,
 CONST 0,
 HelloWorld.println.badSub, L.4)
LABEL L.4
BGE(
 TEMP t.2,
 MEM(
  TEMP t.3, 
  CONST 8, 8, false, false),
 HelloWorld.println.badSub, L.5)
LABEL L.5
MOVE(
 TEMP t.4,
 CALL(
  NAME puts,
  CONST 0,
  ADD(
   MEM(
    TEMP t.3, 
    CONST 0, 8, false, false),
   TEMP t.2)))
EXP(
 TEMP t.4)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP HelloWorld.println.s,
 TEMP %rdi)
LABEL L.8
MOVE(
 TEMP HelloWorld.println.1.x,
 TEMP HelloWorld.println.s)
MOVE(
 TEMP t.1,
 TEMP HelloWorld.println.1.x)
BEQ(
 TEMP t.1,
 CONST 0,
 HelloWorld.println.badPtr, L.3)
LABEL L.3
MOVE(
 TEMP t.3,
 TEMP t.1)
MOVE(
 TEMP t.2,
 CONST 0)
BLT(
 TEMP t.2,
 CONST 0,
 HelloWorld.println.badSub, L.4)
LABEL L.4
BGE(
 TEMP t.2,
 MEM(
  TEMP t.3, 
  CONST 8, 8, false, false),
 HelloWorld.println.badSub, L.5)
LABEL L.5
MOVE(
 TEMP t.4,
 CALL(
  NAME puts,
  CONST 0,
  ADD(
   MEM(
    TEMP t.3, 
    CONST 0, 8, false, false),
   TEMP t.2)))
EXP(
 TEMP t.4)
LABEL L.0
# Instructions:
	movq %rdi,HelloWorld.println.s	# HelloWorld.println.s := %rdi 
L.8:	# <- 
	movq HelloWorld.println.s,HelloWorld.println.1.x	# HelloWorld.println.1.x := HelloWorld.println.s 
	movq HelloWorld.println.1.x,t.1	# t.1 := HelloWorld.println.1.x 
	xorq t.5,t.5	# t.5 <- 
	cmpq t.5,t.1	# <- t.1 t.5 
	je HelloWorld.println.badPtr	# <- : goto HelloWorld.println.badPtr L.3 
L.3:	# <- 
	movq t.1,t.3	# t.3 := t.1 
	xorq t.2,t.2	# t.2 <- 
	xorq t.6,t.6	# t.6 <- 
	cmpq t.6,t.2	# <- t.2 t.6 
	jl HelloWorld.println.badSub	# <- : goto HelloWorld.println.badSub L.4 
L.4:	# <- 
	movq 8(t.3),t.7	# t.7 <- t.3 
	cmpq t.7,t.2	# <- t.2 t.7 
	jge HelloWorld.println.badSub	# <- : goto HelloWorld.println.badSub L.5 
L.5:	# <- 
	movq 0(t.3),t.8	# t.8 <- t.3 
	movq t.8,t.9	# t.9 := t.8 
	addq t.2,t.9	# t.9 <- t.2 t.9 
	movq t.9,%rdi	# %rdi := t.9 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.4	# t.4 := %rax 
L.0:	# <- 
# Control Flow Graph:
0: HelloWorld.println.s <- %rdi; goto 1
1: HelloWorld.println.1.x t.1 t.5 <- HelloWorld.println.s; goto 2
2: t.3 t.2 t.6 <- t.1; goto 3
3: t.7 <- t.3 t.2; goto 4
4: t.8 t.9 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.4 <- t.3 t.2; goto 5
5: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
HelloWorld.println.s: %rsp %rbp 
HelloWorld.println.1.x: %rsp %rbp 
t.1: t.5 %rsp %rbp 
t.5: t.1 %rsp %rbp 
t.3: t.6 t.2 %rsp %rbp t.7 
t.2: t.6 t.3 %rsp %rbp t.7 t.9 t.8 
t.6: t.3 t.2 %rsp %rbp 
t.7: t.3 t.2 %rsp %rbp 
t.8: %rsp %rbp t.2 
t.9: %rsp %rbp t.2 
t.4: %rsp %rbp 
t.9 <= t.8
%rdi <= t.9
t.4 <= %rax
t.3 <= t.1
HelloWorld.println.1.x <= HelloWorld.println.s
t.1 <= HelloWorld.println.1.x
HelloWorld.println.s <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
HelloWorld.println.s->%rax
HelloWorld.println.1.x->%rax
t.1->%rbx
t.5->%rax
t.3->%rcx
t.2->%rbx
t.6->%rax
t.7->%rax
t.8->%rax
t.9->%rax
t.4->%rax
# Assembly code:
	.text
HelloWorld.println:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rax
L.8:
#	movq %rax,%rax
	movq %rax,%rbx
	xorq %rax,%rax
	cmpq %rax,%rbx
	je HelloWorld.println.badPtr
L.3:
	movq %rbx,%rcx
	xorq %rbx,%rbx
	xorq %rax,%rax
	cmpq %rax,%rbx
	jl HelloWorld.println.badSub
L.4:
	movq 8(%rcx),%rax
	cmpq %rax,%rbx
	jge HelloWorld.println.badSub
L.5:
	movq 0(%rcx),%rax
#	movq %rax,%rax
	addq %rbx,%rax
	movq %rax,%rdi
	call puts
#	movq %rax,%rax
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
HelloWorld.println.badPtr:
	call badPtr
HelloWorld.println.badSub:
	call badSub
END HelloWorld.println
	.data
	.balign 8
L.6:
	.byte 72
	.byte 101
	.byte 108
	.byte 108
	.byte 111
	.byte 32
	.byte 87
	.byte 111
	.byte 114
	.byte 108
	.byte 100
	.byte 0
	.data
	.balign 8
L.7:
	.quad L.6
	.quad 12
PROCEDURE HelloWorld
# Trees:
EXP(
 CALL(
  NAME HelloWorld.println,
  CONST 0,
  NAME L.7))
# Linearized (trees):
MOVE(
 TEMP t.10,
 CALL(
  NAME HelloWorld.println,
  CONST 0,
  NAME L.7))
EXP(
 TEMP t.10)
# Basic Blocks:
# 0
LABEL L.9
MOVE(
 TEMP t.10,
 CALL(
  NAME HelloWorld.println,
  CONST 0,
  NAME L.7))
EXP(
 TEMP t.10)
# Trace Scheduled:
LABEL L.9
MOVE(
 TEMP t.10,
 CALL(
  NAME HelloWorld.println,
  CONST 0,
  NAME L.7))
EXP(
 TEMP t.10)
# With procedure entry/exit:
LABEL L.9
MOVE(
 TEMP t.10,
 CALL(
  NAME HelloWorld.println,
  CONST 0,
  NAME L.7))
EXP(
 TEMP t.10)
# Instructions:
L.9:	# <- 
	leaq L.7(%rip),t.11	# t.11 <- 
	movq t.11,%rdi	# %rdi := t.11 
	call HelloWorld.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.10	# t.10 := %rax 
# Control Flow Graph:
0: t.11 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.10 <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.11: %rsp %rbp 
t.10: %rsp %rbp 
%rdi <= t.11
t.10 <= %rax
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.11->%rax
t.10->%rax
# Assembly code:
	.text
HelloWorld:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
L.9:
	leaq L.7(%rip),%rax
	movq %rax,%rdi
	call HelloWorld.println
#	movq %rax,%rax
#	returnSink
	addq $16,%rsp
	popq %rbp
	ret
END HelloWorld
