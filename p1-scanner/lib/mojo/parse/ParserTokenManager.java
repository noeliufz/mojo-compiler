/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */

/** Token Manager. */
public class ParserTokenManager implements ParserConstants {
  int comment;
  public static void main(String[] args) {
    try {
      java.io.Reader reader = new java.io.InputStreamReader(System.in);
      SimpleCharStream stream = new SimpleCharStream(reader);
      ParserTokenManager scanner = new ParserTokenManager(stream);
      while (true) {
        Token token = scanner.getNextToken();
        for (Token t = token.specialToken; t != null; t = t.specialToken)
          System.out.println(tokenImage[t.kind] + " " + t);
        if (token.kind == EOF) break;
        System.out.println(tokenImage[token.kind] + " " + token);
      }
    } catch (TokenMgrError e) {
      System.out.println("!ERROR");
      System.err.println(e.getMessage());
      System.exit(-1);
    }
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000L) != 0L)
            return 65;
         if ((active0 & 0xfffff80L) != 0L)
         {
            jjmatchedKind = 70;
            return 72;
         }
         return -1;
      case 1:
         if ((active0 & 0xfbedd80L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
            return 72;
         }
         if ((active0 & 0x412200L) != 0L)
            return 72;
         return -1;
      case 2:
         if ((active0 & 0x9b6cd80L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
            return 72;
         }
         if ((active0 & 0x6081000L) != 0L)
            return 72;
         return -1;
      case 3:
         if ((active0 & 0xa24800L) != 0L)
            return 72;
         if ((active0 & 0x9148580L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
            return 72;
         }
         return -1;
      case 4:
         if ((active0 & 0x9000580L) != 0L)
            return 72;
         if ((active0 & 0x148000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
            return 72;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 46);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 40:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         return jjStopAtPos(0, 44);
      case 43:
         return jjStopAtPos(0, 42);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         return jjStopAtPos(0, 43);
      case 46:
         return jjStopAtPos(0, 35);
      case 47:
         return jjStartNfaWithStates_0(0, 45, 65);
      case 58:
         return jjStopAtPos(0, 32);
      case 59:
         return jjStopAtPos(0, 33);
      case 60:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 61:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 62:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 52);
      case 93:
         return jjStopAtPos(0, 53);
      case 94:
         return jjStopAtPos(0, 47);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe00000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x6000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 50);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 42:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 61:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 72);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 72);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8200000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 72);
         return jjMoveStringLiteralDfa2_0(active0, 0x5400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20180L, active1, 0L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 72);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 124:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 72);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 72);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 72);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 72);
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x180L);
      case 99:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 72);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 72);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 72);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 72);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 112:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 72);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 72);
         break;
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 72);
         break;
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 72);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 72);
         break;
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 72);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 72);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 39)
                     { jjAddStates(7, 9); }
                  break;
               case 1:
                  if ((0xffffff7f00000000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if (curChar == 39 && kind > 63)
                     kind = 63;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
               case 16:
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 23:
                  if (curChar == 34)
                     { jjCheckNAdd(2); }
                  break;
               case 24:
                  if (curChar == 39)
                     { jjCheckNAdd(2); }
                  break;
               case 33:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 34:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 35:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
               case 62:
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 47:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 50:
                  if (curChar == 39)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if (curChar == 47)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 66:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 67:
                  if ((0x2400L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 68:
                  if (curChar == 10 && kind > 65)
                     kind = 65;
                  break;
               case 69:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(74); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(72); }
                  break;
               case 1:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 92)
                     { jjAddStates(13, 15); }
                  break;
               case 4:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
               case 16:
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 13:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if (curChar == 92)
                     { jjAddStates(16, 26); }
                  break;
               case 25:
                  if (curChar == 92)
                     { jjCheckNAdd(2); }
                  break;
               case 26:
                  if (curChar == 118)
                     { jjCheckNAdd(2); }
                  break;
               case 27:
                  if (curChar == 116)
                     { jjCheckNAdd(2); }
                  break;
               case 28:
                  if (curChar == 114)
                     { jjCheckNAdd(2); }
                  break;
               case 29:
                  if (curChar == 110)
                     { jjCheckNAdd(2); }
                  break;
               case 30:
                  if (curChar == 102)
                     { jjCheckNAdd(2); }
                  break;
               case 31:
                  if (curChar == 98)
                     { jjCheckNAdd(2); }
                  break;
               case 32:
                  if (curChar == 97)
                     { jjCheckNAdd(2); }
                  break;
               case 34:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 36:
                  if (curChar == 92)
                     { jjAddStates(27, 29); }
                  break;
               case 37:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
               case 62:
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 46:
                  if (curChar == 92)
                     { jjAddStates(30, 40); }
                  break;
               case 51:
                  if (curChar == 92)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 52:
                  if (curChar == 118)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 53:
                  if (curChar == 116)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 54:
                  if (curChar == 114)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 55:
                  if (curChar == 110)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 56:
                  if (curChar == 102)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 57:
                  if (curChar == 98)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 58:
                  if (curChar == 97)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 59:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  { jjAddStates(10, 12); }
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(72); }
                  break;
               case 76:
                  if (curChar == 95)
                     { jjCheckNAdd(77); }
                  break;
               case 77:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(77); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(3, 6); }
                  break;
               case 66:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjAddStates(10, 12); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_1(0x8L);
      case 42:
         return jjMoveStringLiteralDfa1_1(0x10L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 42:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\141\162\162\141\171", 
"\142\162\145\141\153", "\142\171", "\143\157\156\163\164", "\145\154\163\145", "\146\157\162", 
"\151\146", "\154\157\157\160", "\157\142\152\145\143\164", "\157\146", 
"\160\162\157\143", "\162\145\143\157\162\144", "\162\145\146", "\162\145\164\165\162\156", 
"\164\150\145\156", "\164\157", "\164\171\160\145", "\165\156\164\151\154", "\166\141\154", 
"\166\141\162", "\167\150\151\154\145", "\75", "\76", "\74", "\41", "\72", "\73", "\54", 
"\56", "\75\75", "\76\75", "\74\75", "\41\75", "\46\46", "\174\174", "\53", "\55", 
"\52", "\57", "\45", "\136", "\50", "\51", "\173", "\175", "\133", "\135", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   74, 75, 76, 34, 35, 36, 46, 1, 3, 19, 66, 67, 69, 4, 13, 17, 
   20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 59, 63, 47, 33, 
   50, 51, 52, 53, 54, 55, 56, 57, 58, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003e00L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 69)
         {
            jjmatchedKind = 69;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 67 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        comment++;
         break;
      case 68 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    comment--;
    SwitchTo (comment == 0 ? DEFAULT : INCOMMENT);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 66 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        comment = 1;
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 78; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INCOMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xa03fffffffffff81L, 0x41L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x1aL, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x24L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[78];
    private final int[] jjstateSet = new int[2 * 78];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
