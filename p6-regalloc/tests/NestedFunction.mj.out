PROCEDURE NestedFunction.println
# Trees:
BLT(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.1, L.2),
LABEL L.1,
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45)),
MOVE(
 TEMP NestedFunction.println.i,
 SUB(
  CONST 0,
  TEMP NestedFunction.println.i)),
LABEL L.2,
BEQ(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.5, L.6),
LABEL L.5,
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48)),
JUMP(
 NAME L.7),
LABEL L.6,
EXP(
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP %rbp,
  TEMP NestedFunction.println.i)),
LABEL L.7,
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10)),
LABEL L.0
# Linearized (trees):
BLT(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.1, L.2)
LABEL L.1
MOVE(
 TEMP t.1,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.1)
MOVE(
 TEMP NestedFunction.println.i,
 SUB(
  CONST 0,
  TEMP NestedFunction.println.i))
LABEL L.2
BEQ(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.5, L.6)
LABEL L.5
MOVE(
 TEMP t.2,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.2)
JUMP(
 NAME L.7)
LABEL L.6
MOVE(
 TEMP t.3,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP %rbp,
  TEMP NestedFunction.println.i))
EXP(
 TEMP t.3)
LABEL L.7
MOVE(
 TEMP t.4,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.4)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.14
BLT(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.1, L.2)
# 1
LABEL L.1
MOVE(
 TEMP t.1,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.1)
MOVE(
 TEMP NestedFunction.println.i,
 SUB(
  CONST 0,
  TEMP NestedFunction.println.i))
JUMP(
 NAME L.2)
# 2
LABEL L.2
BEQ(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.5, L.6)
# 3
LABEL L.5
MOVE(
 TEMP t.2,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.2)
JUMP(
 NAME L.7)
# 4
LABEL L.6
MOVE(
 TEMP t.3,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP %rbp,
  TEMP NestedFunction.println.i))
EXP(
 TEMP t.3)
JUMP(
 NAME L.7)
# 5
LABEL L.7
MOVE(
 TEMP t.4,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.4)
JUMP(
 NAME L.0)
# 6
LABEL L.0
# Trace Scheduled:
LABEL L.14
BLT(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.1, L.2)
LABEL L.2
BEQ(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.5, L.6)
LABEL L.6
MOVE(
 TEMP t.3,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP %rbp,
  TEMP NestedFunction.println.i))
EXP(
 TEMP t.3)
LABEL L.7
MOVE(
 TEMP t.4,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.4)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.1,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.1)
MOVE(
 TEMP NestedFunction.println.i,
 SUB(
  CONST 0,
  TEMP NestedFunction.println.i))
JUMP(
 NAME L.2)
LABEL L.5
MOVE(
 TEMP t.2,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.2)
JUMP(
 NAME L.7)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP NestedFunction.println.i,
 TEMP %rdi)
LABEL L.14
BLT(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.1, L.2)
LABEL L.2
BEQ(
 TEMP NestedFunction.println.i,
 CONST 0,
 L.5, L.6)
LABEL L.6
MOVE(
 TEMP t.3,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP %rbp,
  TEMP NestedFunction.println.i))
EXP(
 TEMP t.3)
LABEL L.7
MOVE(
 TEMP t.4,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.4)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.1,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.1)
MOVE(
 TEMP NestedFunction.println.i,
 SUB(
  CONST 0,
  TEMP NestedFunction.println.i))
JUMP(
 NAME L.2)
LABEL L.5
MOVE(
 TEMP t.2,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.2)
JUMP(
 NAME L.7)
LABEL L.0
# Instructions:
	movq %rdi,NestedFunction.println.i	# NestedFunction.println.i := %rdi 
L.14:	# <- 
	xorq t.5,t.5	# t.5 <- 
	cmpq t.5,NestedFunction.println.i	# <- NestedFunction.println.i t.5 
	jl L.1	# <- : goto L.1 L.2 
L.2:	# <- 
	xorq t.6,t.6	# t.6 <- 
	cmpq t.6,NestedFunction.println.i	# <- NestedFunction.println.i t.6 
	je L.5	# <- : goto L.5 L.6 
L.6:	# <- 
	movq %rbp,%r10	# %r10 := %rbp 
	movq NestedFunction.println.i,%rdi	# %rdi := NestedFunction.println.i 
	call NestedFunction.println.1.f	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 %rdi 
	movq %rax,t.3	# t.3 := %rax 
L.7:	# <- 
	movq $10,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.4	# t.4 := %rax 
	jmp L.0	# <- : goto L.0 
L.1:	# <- 
	movq $45,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.1	# t.1 := %rax 
	xorq t.7,t.7	# t.7 <- 
	movq t.7,t.8	# t.8 := t.7 
	subq NestedFunction.println.i,t.8	# t.8 <- NestedFunction.println.i t.8 
	movq t.8,NestedFunction.println.i	# NestedFunction.println.i := t.8 
	jmp L.2	# <- : goto L.2 
L.5:	# <- 
	movq $48,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.2	# t.2 := %rax 
	jmp L.7	# <- : goto L.7 
L.0:	# <- 
# Control Flow Graph:
0: NestedFunction.println.i <- %rdi; goto 1
1: t.5 <- NestedFunction.println.i; goto 5 2
2: t.6 <- NestedFunction.println.i; goto 6 3
3: %r10 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 t.3 <- %rbp NestedFunction.println.i; goto 4
4: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.4 <-; goto 7
5: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.1 t.7 t.8 NestedFunction.println.i <- NestedFunction.println.i; goto 2
6: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.2 <-; goto 4
7: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
NestedFunction.println.i: %rsp %rbp t.5 t.6 %r10 t.8 t.7 t.1 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 
t.5: NestedFunction.println.i %rsp %rbp 
t.6: %rsp %rbp NestedFunction.println.i 
t.3: %rsp %rbp 
t.4: %rsp %rbp 
t.1: %rsp %rbp NestedFunction.println.i 
t.7: %rsp %rbp NestedFunction.println.i 
t.8: %rsp %rbp NestedFunction.println.i 
t.2: %rsp %rbp 
t.2 <= %rax
t.1 <= %rax
t.8 <= t.7
NestedFunction.println.i <= t.8
t.4 <= %rax
%r10 <= %rbp
%rdi <= NestedFunction.println.i
t.3 <= %rax
NestedFunction.println.i <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
NestedFunction.println.i->%rbx
t.5->%rax
t.6->%rax
t.3->%rax
t.4->%rax
t.1->%rax
t.7->%rax
t.8->%rax
t.2->%rax
# Assembly code:
	.text
NestedFunction.println:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rbx
L.14:
	xorq %rax,%rax
	cmpq %rax,%rbx
	jl L.1
L.2:
	xorq %rax,%rax
	cmpq %rax,%rbx
	je L.5
L.6:
	movq %rbp,%r10
	movq %rbx,%rdi
	call NestedFunction.println.1.f
#	movq %rax,%rax
L.7:
	movq $10,%rdi
	call putchar
#	movq %rax,%rax
	jmp L.0
L.1:
	movq $45,%rdi
	call putchar
#	movq %rax,%rax
	xorq %rax,%rax
#	movq %rax,%rax
	subq %rbx,%rax
	movq %rax,%rbx
	jmp L.2
L.5:
	movq $48,%rdi
	call putchar
#	movq %rax,%rax
	jmp L.7
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
NestedFunction.println.badSub:
	call badSub
END NestedFunction.println
PROCEDURE NestedFunction.println.1.f
# Trees:
BGT(
 TEMP NestedFunction.println.1.f.i,
 CONST 0,
 L.9, L.10),
LABEL L.9,
EXP(
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP _link,
  DIV(
   TEMP NestedFunction.println.1.f.i,
   CONST 10))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP NestedFunction.println.1.f.i,
    MUL(
     DIV(
      TEMP NestedFunction.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48))),
LABEL L.10,
LABEL L.8
# Linearized (trees):
BGT(
 TEMP NestedFunction.println.1.f.i,
 CONST 0,
 L.9, L.10)
LABEL L.9
MOVE(
 TEMP t.9,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP _link,
  DIV(
   TEMP NestedFunction.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.9)
MOVE(
 TEMP t.10,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP NestedFunction.println.1.f.i,
    MUL(
     DIV(
      TEMP NestedFunction.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.10)
LABEL L.10
LABEL L.8
# Basic Blocks:
# 0
LABEL L.15
BGT(
 TEMP NestedFunction.println.1.f.i,
 CONST 0,
 L.9, L.10)
# 1
LABEL L.9
MOVE(
 TEMP t.9,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP _link,
  DIV(
   TEMP NestedFunction.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.9)
MOVE(
 TEMP t.10,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP NestedFunction.println.1.f.i,
    MUL(
     DIV(
      TEMP NestedFunction.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.10)
JUMP(
 NAME L.10)
# 2
LABEL L.10
JUMP(
 NAME L.8)
# 3
LABEL L.8
# Trace Scheduled:
LABEL L.15
BGT(
 TEMP NestedFunction.println.1.f.i,
 CONST 0,
 L.9, L.10)
LABEL L.10
JUMP(
 NAME L.8)
LABEL L.9
MOVE(
 TEMP t.9,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP _link,
  DIV(
   TEMP NestedFunction.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.9)
MOVE(
 TEMP t.10,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP NestedFunction.println.1.f.i,
    MUL(
     DIV(
      TEMP NestedFunction.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.10)
JUMP(
 NAME L.10)
LABEL L.8
# With procedure entry/exit:
MOVE(
 TEMP _link,
 TEMP %r10)
MOVE(
 TEMP NestedFunction.println.1.f.i,
 TEMP %rdi)
LABEL L.15
BGT(
 TEMP NestedFunction.println.1.f.i,
 CONST 0,
 L.9, L.10)
LABEL L.10
JUMP(
 NAME L.8)
LABEL L.9
MOVE(
 TEMP t.9,
 CALL(
  NAME NestedFunction.println.1.f,
  TEMP _link,
  DIV(
   TEMP NestedFunction.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.9)
MOVE(
 TEMP t.10,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP NestedFunction.println.1.f.i,
    MUL(
     DIV(
      TEMP NestedFunction.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.10)
JUMP(
 NAME L.10)
LABEL L.8
# Instructions:
	movq %r10,_link	# _link := %r10 
	movq %rdi,NestedFunction.println.1.f.i	# NestedFunction.println.1.f.i := %rdi 
L.15:	# <- 
	xorq t.11,t.11	# t.11 <- 
	cmpq t.11,NestedFunction.println.1.f.i	# <- NestedFunction.println.1.f.i t.11 
	jg L.9	# <- : goto L.9 L.10 
L.10:	# <- 
	jmp L.8	# <- : goto L.8 
L.9:	# <- 
	movq _link,%r10	# %r10 := _link 
	movq $10,t.12	# t.12 <- 
	movq NestedFunction.println.1.f.i,%rax	# %rax := NestedFunction.println.1.f.i 
	cqto	# %rax %rdx <- %rax 
	idivq t.12	# %rax %rdx <- t.12 %rax %rdx 
	movq %rax,t.13	# t.13 := %rax 
	movq t.13,%rdi	# %rdi := t.13 
	call NestedFunction.println.1.f	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 %rdi 
	movq %rax,t.9	# t.9 := %rax 
	movq $10,t.14	# t.14 <- 
	movq NestedFunction.println.1.f.i,%rax	# %rax := NestedFunction.println.1.f.i 
	cqto	# %rax %rdx <- %rax 
	idivq t.14	# %rax %rdx <- t.14 %rax %rdx 
	movq %rax,t.15	# t.15 := %rax 
	movq t.15,t.16	# t.16 := t.15 
	imulq $10,t.16	# t.16 <- t.16 
	movq NestedFunction.println.1.f.i,t.17	# t.17 := NestedFunction.println.1.f.i 
	subq t.16,t.17	# t.17 <- t.16 t.17 
	movq t.17,t.18	# t.18 := t.17 
	addq $48,t.18	# t.18 <- t.18 
	movq t.18,%rdi	# %rdi := t.18 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.10	# t.10 := %rax 
	jmp L.10	# <- : goto L.10 
L.8:	# <- 
# Control Flow Graph:
0: _link NestedFunction.println.1.f.i <- %r10 %rdi; goto 1
1: t.11 <- NestedFunction.println.1.f.i; goto 3 2
2: <-; goto 4
3: %r10 t.12 %rax %rdx t.13 %rdi %rsi %rcx %r8 %r9 %r11 t.9 t.14 t.15 t.16 t.17 t.18 t.10 <- _link NestedFunction.println.1.f.i; goto 2
4: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
_link: NestedFunction.println.1.f.i %rsp %rbp %rdi t.11 
NestedFunction.println.1.f.i: _link %rsp %rbp t.11 t.16 t.15 %rax %rdx t.14 t.9 %rdi %rsi %rcx %r8 %r9 %r10 %r11 t.13 t.12 
t.11: _link NestedFunction.println.1.f.i %rsp %rbp 
t.12: %rax %rdx %rsp %rbp NestedFunction.println.1.f.i %r10 
t.13: %rsp %rbp NestedFunction.println.1.f.i %r10 
t.9: %rsp %rbp NestedFunction.println.1.f.i 
t.14: %rax %rdx %rsp %rbp NestedFunction.println.1.f.i 
t.15: %rsp %rbp NestedFunction.println.1.f.i 
t.16: t.17 %rsp %rbp NestedFunction.println.1.f.i 
t.17: %rsp %rbp t.16 
t.18: %rsp %rbp 
t.10: %rsp %rbp 
%r10 <= _link
%rax <= NestedFunction.println.1.f.i
t.13 <= %rax
%rdi <= t.13
t.9 <= %rax
%rax <= NestedFunction.println.1.f.i
t.15 <= %rax
t.16 <= t.15
t.17 <= NestedFunction.println.1.f.i
t.18 <= t.17
%rdi <= t.18
t.10 <= %rax
_link <= %r10
NestedFunction.println.1.f.i <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
_link->%r10
NestedFunction.println.1.f.i->%rbx
t.11->%rax
t.12->%rcx
t.13->%rax
t.9->%rax
t.14->%rcx
t.15->%rax
t.16->%rax
t.17->%rbx
t.18->%rbx
t.10->%rax
# Assembly code:
	.text
NestedFunction.println.1.f:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
#	movq %r10,%r10
	movq %rdi,%rbx
L.15:
	xorq %rax,%rax
	cmpq %rax,%rbx
	jg L.9
L.10:
	jmp L.8
L.9:
#	movq %r10,%r10
	movq $10,%rcx
	movq %rbx,%rax
	cqto
	idivq %rcx
#	movq %rax,%rax
	movq %rax,%rdi
	call NestedFunction.println.1.f
#	movq %rax,%rax
	movq $10,%rcx
	movq %rbx,%rax
	cqto
	idivq %rcx
#	movq %rax,%rax
#	movq %rax,%rax
	imulq $10,%rax
#	movq %rbx,%rbx
	subq %rax,%rbx
#	movq %rbx,%rbx
	addq $48,%rbx
	movq %rbx,%rdi
	call putchar
#	movq %rax,%rax
	jmp L.10
L.8:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
NestedFunction.println.1.f.badSub:
	call badSub
END NestedFunction.println.1.f
PROCEDURE NestedFunction
# Trees:
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 0),
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 5),
EXP(
 CALL(
  NAME NestedFunction.4.A,
  TEMP %rbp))
# Linearized (trees):
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 0)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 5)
MOVE(
 TEMP t.19,
 CALL(
  NAME NestedFunction.4.A,
  TEMP %rbp))
EXP(
 TEMP t.19)
# Basic Blocks:
# 0
LABEL L.16
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 0)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 5)
MOVE(
 TEMP t.19,
 CALL(
  NAME NestedFunction.4.A,
  TEMP %rbp))
EXP(
 TEMP t.19)
# Trace Scheduled:
LABEL L.16
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 0)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 5)
MOVE(
 TEMP t.19,
 CALL(
  NAME NestedFunction.4.A,
  TEMP %rbp))
EXP(
 TEMP t.19)
# With procedure entry/exit:
LABEL L.16
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 0)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, true, false),
 CONST 5)
MOVE(
 TEMP t.19,
 CALL(
  NAME NestedFunction.4.A,
  TEMP %rbp))
EXP(
 TEMP t.19)
# Instructions:
L.16:	# <- 
	movq $0,-8(%rbp)	# <- %rbp 
	movq $5,-8(%rbp)	# <- %rbp 
	movq %rbp,%r10	# %r10 := %rbp 
	call NestedFunction.4.A	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 
	movq %rax,t.19	# t.19 := %rax 
# Control Flow Graph:
0: %r10 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 t.19 <- %rbp %rsp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.19: %rsp %rbp 
%r10 <= %rbp
t.19 <= %rax
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.19->%rax
# Assembly code:
	.text
NestedFunction:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
L.16:
	movq $0,-8(%rbp)
	movq $5,-8(%rbp)
	movq %rbp,%r10
	call NestedFunction.4.A
#	movq %rax,%rax
#	returnSink
	addq $16,%rsp
	popq %rbp
	ret
NestedFunction.badSub:
	call badSub
END NestedFunction
PROCEDURE NestedFunction.4.A
# Trees:
EXP(
 CALL(
  NAME NestedFunction.4.A.1.B,
  TEMP %rbp)),
LABEL L.11
# Linearized (trees):
MOVE(
 TEMP t.20,
 CALL(
  NAME NestedFunction.4.A.1.B,
  TEMP %rbp))
EXP(
 TEMP t.20)
LABEL L.11
# Basic Blocks:
# 0
LABEL L.17
MOVE(
 TEMP t.20,
 CALL(
  NAME NestedFunction.4.A.1.B,
  TEMP %rbp))
EXP(
 TEMP t.20)
JUMP(
 NAME L.11)
# 1
LABEL L.11
# Trace Scheduled:
LABEL L.17
MOVE(
 TEMP t.20,
 CALL(
  NAME NestedFunction.4.A.1.B,
  TEMP %rbp))
EXP(
 TEMP t.20)
LABEL L.11
# With procedure entry/exit:
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8, false, false),
 TEMP %r10)
LABEL L.17
MOVE(
 TEMP t.20,
 CALL(
  NAME NestedFunction.4.A.1.B,
  TEMP %rbp))
EXP(
 TEMP t.20)
LABEL L.11
# Instructions:
	movq %r10,-8(%rbp)	# <- %rbp %r10 
L.17:	# <- 
	movq %rbp,%r10	# %r10 := %rbp 
	call NestedFunction.4.A.1.B	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 
	movq %rax,t.20	# t.20 := %rax 
L.11:	# <- 
# Control Flow Graph:
0: <- %rbp %r10; goto 1
1: %r10 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 t.20 <- %rbp; goto 2
2: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.20: %rsp %rbp 
%r10 <= %rbp
t.20 <= %rax
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.20->%rax
# Assembly code:
	.text
NestedFunction.4.A:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %r10,-8(%rbp)
L.17:
	movq %rbp,%r10
	call NestedFunction.4.A.1.B
#	movq %rax,%rax
L.11:
#	returnSink
	addq $16,%rsp
	popq %rbp
	ret
END NestedFunction.4.A
PROCEDURE NestedFunction.4.A.1.B
# Trees:
EXP(
 CALL(
  NAME NestedFunction.4.A.1.C,
  TEMP _link)),
LABEL L.12
# Linearized (trees):
MOVE(
 TEMP t.21,
 CALL(
  NAME NestedFunction.4.A.1.C,
  TEMP _link))
EXP(
 TEMP t.21)
LABEL L.12
# Basic Blocks:
# 0
LABEL L.18
MOVE(
 TEMP t.21,
 CALL(
  NAME NestedFunction.4.A.1.C,
  TEMP _link))
EXP(
 TEMP t.21)
JUMP(
 NAME L.12)
# 1
LABEL L.12
# Trace Scheduled:
LABEL L.18
MOVE(
 TEMP t.21,
 CALL(
  NAME NestedFunction.4.A.1.C,
  TEMP _link))
EXP(
 TEMP t.21)
LABEL L.12
# With procedure entry/exit:
MOVE(
 TEMP _link,
 TEMP %r10)
LABEL L.18
MOVE(
 TEMP t.21,
 CALL(
  NAME NestedFunction.4.A.1.C,
  TEMP _link))
EXP(
 TEMP t.21)
LABEL L.12
# Instructions:
	movq %r10,_link	# _link := %r10 
L.18:	# <- 
	movq _link,%r10	# %r10 := _link 
	call NestedFunction.4.A.1.C	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 
	movq %rax,t.21	# t.21 := %rax 
L.12:	# <- 
# Control Flow Graph:
0: _link <- %r10; goto 1
1: %r10 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 t.21 <- _link; goto 2
2: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
_link: %rsp %rbp 
t.21: %rsp %rbp 
%r10 <= _link
t.21 <= %rax
_link <= %r10
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
_link->%r10
t.21->%rax
# Assembly code:
	.text
NestedFunction.4.A.1.B:
	pushq %rbp
	movq %rsp,%rbp
#	movq %r10,%r10
L.18:
#	movq %r10,%r10
	call NestedFunction.4.A.1.C
#	movq %rax,%rax
L.12:
#	returnSink
	popq %rbp
	ret
END NestedFunction.4.A.1.B
PROCEDURE NestedFunction.4.A.1.C
# Trees:
EXP(
 CALL(
  NAME NestedFunction.println,
  CONST 0,
  MEM(
   MEM(
    TEMP _link, 
    CONST -8, 8, false, false), 
   CONST -8, 8, true, false))),
LABEL L.13
# Linearized (trees):
MOVE(
 TEMP t.22,
 CALL(
  NAME NestedFunction.println,
  CONST 0,
  MEM(
   MEM(
    TEMP _link, 
    CONST -8, 8, false, false), 
   CONST -8, 8, true, false)))
EXP(
 TEMP t.22)
LABEL L.13
# Basic Blocks:
# 0
LABEL L.19
MOVE(
 TEMP t.22,
 CALL(
  NAME NestedFunction.println,
  CONST 0,
  MEM(
   MEM(
    TEMP _link, 
    CONST -8, 8, false, false), 
   CONST -8, 8, true, false)))
EXP(
 TEMP t.22)
JUMP(
 NAME L.13)
# 1
LABEL L.13
# Trace Scheduled:
LABEL L.19
MOVE(
 TEMP t.22,
 CALL(
  NAME NestedFunction.println,
  CONST 0,
  MEM(
   MEM(
    TEMP _link, 
    CONST -8, 8, false, false), 
   CONST -8, 8, true, false)))
EXP(
 TEMP t.22)
LABEL L.13
# With procedure entry/exit:
MOVE(
 TEMP _link,
 TEMP %r10)
LABEL L.19
MOVE(
 TEMP t.22,
 CALL(
  NAME NestedFunction.println,
  CONST 0,
  MEM(
   MEM(
    TEMP _link, 
    CONST -8, 8, false, false), 
   CONST -8, 8, true, false)))
EXP(
 TEMP t.22)
LABEL L.13
# Instructions:
	movq %r10,_link	# _link := %r10 
L.19:	# <- 
	movq -8(_link),t.23	# t.23 <- _link 
	movq -8(t.23),t.24	# t.24 <- t.23 
	movq t.24,%rdi	# %rdi := t.24 
	call NestedFunction.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.22	# t.22 := %rax 
L.13:	# <- 
# Control Flow Graph:
0: _link <- %r10; goto 1
1: t.23 t.24 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.22 <- _link; goto 2
2: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
_link: %rsp %rbp 
t.23: %rsp %rbp 
t.24: %rsp %rbp 
t.22: %rsp %rbp 
%rdi <= t.24
t.22 <= %rax
_link <= %r10
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
_link->%r10
t.23->%rax
t.24->%rdi
t.22->%rax
# Assembly code:
	.text
NestedFunction.4.A.1.C:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
#	movq %r10,%r10
L.19:
	movq -8(%r10),%rax
	movq -8(%rax),%rdi
#	movq %rdi,%rdi
	call NestedFunction.println
#	movq %rax,%rax
L.13:
#	returnSink
	addq $16,%rsp
	popq %rbp
	ret
NestedFunction.4.A.1.C.badSub:
	call badSub
END NestedFunction.4.A.1.C
