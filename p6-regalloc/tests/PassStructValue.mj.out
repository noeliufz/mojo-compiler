	.data
	.balign 8
PassStructValue.r:
	.zero 48
PROCEDURE PassStructValue.callee
# Trees:
MOVE(
 TEMP %rax,
 ADD(
  ADD(
   ADD(
    ADD(
     ADD(
      MEM(
       TEMP %rbp, 
       CONST 16, 8, true, false),
      MEM(
       TEMP %rbp, 
       CONST 24, 8, true, false)),
     MEM(
      TEMP %rbp, 
      CONST 32, 8, true, false)),
    MEM(
     TEMP %rbp, 
     CONST 40, 8, true, false)),
   MEM(
    TEMP %rbp, 
    CONST 48, 8, true, false)),
  MEM(
   TEMP %rbp, 
   CONST 56, 8, true, false))),
JUMP(
 NAME L.0),
LABEL L.0
# Linearized (trees):
MOVE(
 TEMP %rax,
 ADD(
  ADD(
   ADD(
    ADD(
     ADD(
      MEM(
       TEMP %rbp, 
       CONST 16, 8, true, false),
      MEM(
       TEMP %rbp, 
       CONST 24, 8, true, false)),
     MEM(
      TEMP %rbp, 
      CONST 32, 8, true, false)),
    MEM(
     TEMP %rbp, 
     CONST 40, 8, true, false)),
   MEM(
    TEMP %rbp, 
    CONST 48, 8, true, false)),
  MEM(
   TEMP %rbp, 
   CONST 56, 8, true, false)))
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.2
MOVE(
 TEMP %rax,
 ADD(
  ADD(
   ADD(
    ADD(
     ADD(
      MEM(
       TEMP %rbp, 
       CONST 16, 8, true, false),
      MEM(
       TEMP %rbp, 
       CONST 24, 8, true, false)),
     MEM(
      TEMP %rbp, 
      CONST 32, 8, true, false)),
    MEM(
     TEMP %rbp, 
     CONST 40, 8, true, false)),
   MEM(
    TEMP %rbp, 
    CONST 48, 8, true, false)),
  MEM(
   TEMP %rbp, 
   CONST 56, 8, true, false)))
JUMP(
 NAME L.0)
# 1
LABEL L.0
# Trace Scheduled:
LABEL L.2
MOVE(
 TEMP %rax,
 ADD(
  ADD(
   ADD(
    ADD(
     ADD(
      MEM(
       TEMP %rbp, 
       CONST 16, 8, true, false),
      MEM(
       TEMP %rbp, 
       CONST 24, 8, true, false)),
     MEM(
      TEMP %rbp, 
      CONST 32, 8, true, false)),
    MEM(
     TEMP %rbp, 
     CONST 40, 8, true, false)),
   MEM(
    TEMP %rbp, 
    CONST 48, 8, true, false)),
  MEM(
   TEMP %rbp, 
   CONST 56, 8, true, false)))
LABEL L.0
# With procedure entry/exit:
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 56, 8, false, false),
 TEMP %r9)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 48, 8, false, false),
 TEMP %r8)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 40, 8, false, false),
 TEMP %rcx)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 32, 8, false, false),
 TEMP %rdx)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 24, 8, false, false),
 TEMP %rsi)
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false),
 TEMP %rdi)
LABEL L.2
MOVE(
 TEMP %rax,
 ADD(
  ADD(
   ADD(
    ADD(
     ADD(
      MEM(
       TEMP %rbp, 
       CONST 16, 8, true, false),
      MEM(
       TEMP %rbp, 
       CONST 24, 8, true, false)),
     MEM(
      TEMP %rbp, 
      CONST 32, 8, true, false)),
    MEM(
     TEMP %rbp, 
     CONST 40, 8, true, false)),
   MEM(
    TEMP %rbp, 
    CONST 48, 8, true, false)),
  MEM(
   TEMP %rbp, 
   CONST 56, 8, true, false)))
LABEL L.0
# Instructions:
	movq %r9,56(%rbp)	# <- %rbp %r9 
	movq %r8,48(%rbp)	# <- %rbp %r8 
	movq %rcx,40(%rbp)	# <- %rbp %rcx 
	movq %rdx,32(%rbp)	# <- %rbp %rdx 
	movq %rsi,24(%rbp)	# <- %rbp %rsi 
	movq %rdi,16(%rbp)	# <- %rbp %rdi 
L.2:	# <- 
	movq 16(%rbp),t.0	# t.0 <- %rbp 
	movq 24(%rbp),t.1	# t.1 <- %rbp 
	movq t.0,t.2	# t.2 := t.0 
	addq t.1,t.2	# t.2 <- t.1 t.2 
	movq 32(%rbp),t.3	# t.3 <- %rbp 
	movq t.2,t.4	# t.4 := t.2 
	addq t.3,t.4	# t.4 <- t.3 t.4 
	movq 40(%rbp),t.5	# t.5 <- %rbp 
	movq t.4,t.6	# t.6 := t.4 
	addq t.5,t.6	# t.6 <- t.5 t.6 
	movq 48(%rbp),t.7	# t.7 <- %rbp 
	movq t.6,t.8	# t.8 := t.6 
	addq t.7,t.8	# t.8 <- t.7 t.8 
	movq 56(%rbp),t.9	# t.9 <- %rbp 
	movq t.8,t.10	# t.10 := t.8 
	addq t.9,t.10	# t.10 <- t.9 t.10 
	movq t.10,%rax	# %rax := t.10 
L.0:	# <- 
# Control Flow Graph:
0: <- %rbp %r9 %r8 %rcx %rdx %rsi %rdi; goto 1
1: t.0 t.1 t.2 t.3 t.4 t.5 t.6 t.7 t.8 t.9 t.10 %rax <- %rbp; goto 2
2: <- %rsp %rbp %rax; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.0: t.1 %rsp %rbp 
t.1: t.2 %rsp %rbp t.0 
t.2: t.3 %rsp %rbp t.1 
t.3: t.4 %rsp %rbp t.2 
t.4: t.5 %rsp %rbp t.3 
t.5: t.6 %rsp %rbp t.4 
t.6: t.7 %rsp %rbp t.5 
t.7: t.8 %rsp %rbp t.6 
t.8: t.9 %rsp %rbp t.7 
t.9: t.10 %rsp %rbp t.8 
t.10: %rsp %rbp t.9 
t.2 <= t.0
t.4 <= t.2
t.6 <= t.4
t.8 <= t.6
t.10 <= t.8
%rax <= t.10
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.0->%rax
t.1->%rbx
t.2->%rax
t.3->%rbx
t.4->%rax
t.5->%rbx
t.6->%rax
t.7->%rbx
t.8->%rax
t.9->%rbx
t.10->%rax
# Assembly code:
	.text
PassStructValue.callee:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %r9,56(%rbp)
	movq %r8,48(%rbp)
	movq %rcx,40(%rbp)
	movq %rdx,32(%rbp)
	movq %rsi,24(%rbp)
	movq %rdi,16(%rbp)
L.2:
	movq 16(%rbp),%rax
	movq 24(%rbp),%rbx
#	movq %rax,%rax
	addq %rbx,%rax
	movq 32(%rbp),%rbx
#	movq %rax,%rax
	addq %rbx,%rax
	movq 40(%rbp),%rbx
#	movq %rax,%rax
	addq %rbx,%rax
	movq 48(%rbp),%rbx
#	movq %rax,%rax
	addq %rbx,%rax
	movq 56(%rbp),%rbx
#	movq %rax,%rax
	addq %rbx,%rax
#	movq %rax,%rax
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
PassStructValue.callee.badSub:
	call badSub
END PassStructValue.callee
PROCEDURE PassStructValue.caller
# Trees:
MOVE(
 TEMP %rax,
 CALL(
  NAME PassStructValue.callee,
  CONST 0,
  MEM(
   NAME PassStructValue.r, 
   CONST 0, 48, false, true))),
JUMP(
 NAME L.1),
LABEL L.1
# Linearized (trees):
MOVE(
 TEMP %rax,
 CALL(
  NAME PassStructValue.callee,
  CONST 0,
  MEM(
   NAME PassStructValue.r, 
   CONST 0, 48, false, true)))
JUMP(
 NAME L.1)
LABEL L.1
# Basic Blocks:
# 0
LABEL L.3
MOVE(
 TEMP %rax,
 CALL(
  NAME PassStructValue.callee,
  CONST 0,
  MEM(
   NAME PassStructValue.r, 
   CONST 0, 48, false, true)))
JUMP(
 NAME L.1)
# 1
LABEL L.1
# Trace Scheduled:
LABEL L.3
MOVE(
 TEMP %rax,
 CALL(
  NAME PassStructValue.callee,
  CONST 0,
  MEM(
   NAME PassStructValue.r, 
   CONST 0, 48, false, true)))
LABEL L.1
# With procedure entry/exit:
LABEL L.3
MOVE(
 TEMP %rax,
 CALL(
  NAME PassStructValue.callee,
  CONST 0,
  MEM(
   NAME PassStructValue.r, 
   CONST 0, 48, false, true)))
LABEL L.1
# Instructions:
L.3:	# <- 
	leaq PassStructValue.r(%rip),t.11	# t.11 <- 
	movq 0(t.11),t.12	# t.12 <- t.11 
	movq t.12,%rdi	# %rdi := t.12 
	movq 8(t.11),t.13	# t.13 <- t.11 
	movq t.13,%rsi	# %rsi := t.13 
	movq 16(t.11),t.14	# t.14 <- t.11 
	movq t.14,%rdx	# %rdx := t.14 
	movq 24(t.11),t.15	# t.15 <- t.11 
	movq t.15,%rcx	# %rcx := t.15 
	movq 32(t.11),t.16	# t.16 <- t.11 
	movq t.16,%r8	# %r8 := t.16 
	movq 40(t.11),t.17	# t.17 <- t.11 
	movq t.17,%r9	# %r9 := t.17 
	call PassStructValue.callee	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi %rsi %rdx %rcx %r8 %r9 
#	movq %rax,%rax	# %rax := %rax 
L.1:	# <- 
# Control Flow Graph:
0: t.11 t.12 %rdi t.13 %rsi t.14 %rdx t.15 %rcx t.16 %r8 t.17 %r9 %rax %r10 %r11 <-; goto 1
1: <- %rsp %rbp %rax; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.11: %r8 t.16 %rcx t.15 %rdx t.14 %rsi t.13 %rdi t.12 %rsp %rbp 
t.12: %rsp %rbp t.11 
t.13: %rsp %rbp %rdi t.11 
t.14: %rsp %rbp %rdi %rsi t.11 
t.15: %rsp %rbp %rdi %rsi %rdx t.11 
t.16: %rsp %rbp %rdi %rsi %rdx %rcx t.11 
t.17: %rsp %rbp %rdi %rsi %rdx %rcx %r8 
%rdi <= t.12
%rsi <= t.13
%rdx <= t.14
%rcx <= t.15
%r8 <= t.16
%r9 <= t.17
%rax <= %rax
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.11->%rax
t.12->%rdi
t.13->%rsi
t.14->%rdx
t.15->%rcx
t.16->%r8
t.17->%r9
# Assembly code:
	.text
PassStructValue.caller:
	pushq %rbp
	movq %rsp,%rbp
	subq $48,%rsp
L.3:
	leaq PassStructValue.r(%rip),%rax
	movq 0(%rax),%rdi
#	movq %rdi,%rdi
	movq 8(%rax),%rsi
#	movq %rsi,%rsi
	movq 16(%rax),%rdx
#	movq %rdx,%rdx
	movq 24(%rax),%rcx
#	movq %rcx,%rcx
	movq 32(%rax),%r8
#	movq %r8,%r8
	movq 40(%rax),%r9
#	movq %r9,%r9
	call PassStructValue.callee
#	movq %rax,%rax
L.1:
#	returnSink
	addq $48,%rsp
	popq %rbp
	ret
PassStructValue.caller.badSub:
	call badSub
END PassStructValue.caller
PROCEDURE PassStructValue
# Trees:
# Linearized (trees):
# Basic Blocks:
# 0
LABEL L.4
# Trace Scheduled:
LABEL L.4
# With procedure entry/exit:
LABEL L.4
# Instructions:
L.4:	# <- 
# Control Flow Graph:
0: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
PassStructValue:
	pushq %rbp
	movq %rsp,%rbp
L.4:
#	returnSink
	popq %rbp
	ret
END PassStructValue
