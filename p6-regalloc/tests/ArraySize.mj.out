	.data
	.balign 8
ArraySize.x:
	.zero 8
	.data
	.balign 8
ArraySize.y:
	.zero 8
PROCEDURE ArraySize.println
# Trees:
BLT(
 TEMP ArraySize.println.i,
 CONST 0,
 L.1, L.2),
LABEL L.1,
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45)),
MOVE(
 TEMP ArraySize.println.i,
 SUB(
  CONST 0,
  TEMP ArraySize.println.i)),
LABEL L.2,
BEQ(
 TEMP ArraySize.println.i,
 CONST 0,
 L.5, L.6),
LABEL L.5,
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48)),
JUMP(
 NAME L.7),
LABEL L.6,
EXP(
 CALL(
  NAME ArraySize.println.1.f,
  TEMP %rbp,
  TEMP ArraySize.println.i)),
LABEL L.7,
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10)),
LABEL L.0
# Linearized (trees):
BLT(
 TEMP ArraySize.println.i,
 CONST 0,
 L.1, L.2)
LABEL L.1
MOVE(
 TEMP t.29,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.29)
MOVE(
 TEMP ArraySize.println.i,
 SUB(
  CONST 0,
  TEMP ArraySize.println.i))
LABEL L.2
BEQ(
 TEMP ArraySize.println.i,
 CONST 0,
 L.5, L.6)
LABEL L.5
MOVE(
 TEMP t.30,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.30)
JUMP(
 NAME L.7)
LABEL L.6
MOVE(
 TEMP t.31,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP %rbp,
  TEMP ArraySize.println.i))
EXP(
 TEMP t.31)
LABEL L.7
MOVE(
 TEMP t.32,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.32)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.25
BLT(
 TEMP ArraySize.println.i,
 CONST 0,
 L.1, L.2)
# 1
LABEL L.1
MOVE(
 TEMP t.29,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.29)
MOVE(
 TEMP ArraySize.println.i,
 SUB(
  CONST 0,
  TEMP ArraySize.println.i))
JUMP(
 NAME L.2)
# 2
LABEL L.2
BEQ(
 TEMP ArraySize.println.i,
 CONST 0,
 L.5, L.6)
# 3
LABEL L.5
MOVE(
 TEMP t.30,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.30)
JUMP(
 NAME L.7)
# 4
LABEL L.6
MOVE(
 TEMP t.31,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP %rbp,
  TEMP ArraySize.println.i))
EXP(
 TEMP t.31)
JUMP(
 NAME L.7)
# 5
LABEL L.7
MOVE(
 TEMP t.32,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.32)
JUMP(
 NAME L.0)
# 6
LABEL L.0
# Trace Scheduled:
LABEL L.25
BLT(
 TEMP ArraySize.println.i,
 CONST 0,
 L.1, L.2)
LABEL L.2
BEQ(
 TEMP ArraySize.println.i,
 CONST 0,
 L.5, L.6)
LABEL L.6
MOVE(
 TEMP t.31,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP %rbp,
  TEMP ArraySize.println.i))
EXP(
 TEMP t.31)
LABEL L.7
MOVE(
 TEMP t.32,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.32)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.29,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.29)
MOVE(
 TEMP ArraySize.println.i,
 SUB(
  CONST 0,
  TEMP ArraySize.println.i))
JUMP(
 NAME L.2)
LABEL L.5
MOVE(
 TEMP t.30,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.30)
JUMP(
 NAME L.7)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP ArraySize.println.i,
 TEMP %rdi)
LABEL L.25
BLT(
 TEMP ArraySize.println.i,
 CONST 0,
 L.1, L.2)
LABEL L.2
BEQ(
 TEMP ArraySize.println.i,
 CONST 0,
 L.5, L.6)
LABEL L.6
MOVE(
 TEMP t.31,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP %rbp,
  TEMP ArraySize.println.i))
EXP(
 TEMP t.31)
LABEL L.7
MOVE(
 TEMP t.32,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.32)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.29,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 45))
EXP(
 TEMP t.29)
MOVE(
 TEMP ArraySize.println.i,
 SUB(
  CONST 0,
  TEMP ArraySize.println.i))
JUMP(
 NAME L.2)
LABEL L.5
MOVE(
 TEMP t.30,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 48))
EXP(
 TEMP t.30)
JUMP(
 NAME L.7)
LABEL L.0
# Instructions:
	movq %rdi,ArraySize.println.i	# ArraySize.println.i := %rdi 
L.25:	# <- 
	xorq t.33,t.33	# t.33 <- 
	cmpq t.33,ArraySize.println.i	# <- ArraySize.println.i t.33 
	jl L.1	# <- : goto L.1 L.2 
L.2:	# <- 
	xorq t.34,t.34	# t.34 <- 
	cmpq t.34,ArraySize.println.i	# <- ArraySize.println.i t.34 
	je L.5	# <- : goto L.5 L.6 
L.6:	# <- 
	movq %rbp,%r10	# %r10 := %rbp 
	movq ArraySize.println.i,%rdi	# %rdi := ArraySize.println.i 
	call ArraySize.println.1.f	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 %rdi 
	movq %rax,t.31	# t.31 := %rax 
L.7:	# <- 
	movq $10,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.32	# t.32 := %rax 
	jmp L.0	# <- : goto L.0 
L.1:	# <- 
	movq $45,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.29	# t.29 := %rax 
	xorq t.35,t.35	# t.35 <- 
	movq t.35,t.36	# t.36 := t.35 
	subq ArraySize.println.i,t.36	# t.36 <- ArraySize.println.i t.36 
	movq t.36,ArraySize.println.i	# ArraySize.println.i := t.36 
	jmp L.2	# <- : goto L.2 
L.5:	# <- 
	movq $48,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.30	# t.30 := %rax 
	jmp L.7	# <- : goto L.7 
L.0:	# <- 
# Control Flow Graph:
0: ArraySize.println.i <- %rdi; goto 1
1: t.33 <- ArraySize.println.i; goto 5 2
2: t.34 <- ArraySize.println.i; goto 6 3
3: %r10 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 t.31 <- %rbp ArraySize.println.i; goto 4
4: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.32 <-; goto 7
5: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.29 t.35 t.36 ArraySize.println.i <- ArraySize.println.i; goto 2
6: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.30 <-; goto 4
7: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
ArraySize.println.i: %rsp %rbp t.33 t.34 %r10 t.36 t.35 t.29 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r11 
t.33: ArraySize.println.i %rsp %rbp 
t.34: %rsp %rbp ArraySize.println.i 
t.31: %rsp %rbp 
t.32: %rsp %rbp 
t.29: %rsp %rbp ArraySize.println.i 
t.35: %rsp %rbp ArraySize.println.i 
t.36: %rsp %rbp ArraySize.println.i 
t.30: %rsp %rbp 
t.30 <= %rax
t.29 <= %rax
t.36 <= t.35
ArraySize.println.i <= t.36
t.32 <= %rax
%r10 <= %rbp
%rdi <= ArraySize.println.i
t.31 <= %rax
ArraySize.println.i <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
ArraySize.println.i->%rbx
t.33->%rax
t.34->%rax
t.31->%rax
t.32->%rax
t.29->%rax
t.35->%rax
t.36->%rax
t.30->%rax
# Assembly code:
	.text
ArraySize.println:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rbx
L.25:
	xorq %rax,%rax
	cmpq %rax,%rbx
	jl L.1
L.2:
	xorq %rax,%rax
	cmpq %rax,%rbx
	je L.5
L.6:
	movq %rbp,%r10
	movq %rbx,%rdi
	call ArraySize.println.1.f
#	movq %rax,%rax
L.7:
	movq $10,%rdi
	call putchar
#	movq %rax,%rax
	jmp L.0
L.1:
	movq $45,%rdi
	call putchar
#	movq %rax,%rax
	xorq %rax,%rax
#	movq %rax,%rax
	subq %rbx,%rax
	movq %rax,%rbx
	jmp L.2
L.5:
	movq $48,%rdi
	call putchar
#	movq %rax,%rax
	jmp L.7
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
ArraySize.println.badSub:
	call badSub
END ArraySize.println
PROCEDURE ArraySize.println.1.f
# Trees:
BGT(
 TEMP ArraySize.println.1.f.i,
 CONST 0,
 L.9, L.10),
LABEL L.9,
EXP(
 CALL(
  NAME ArraySize.println.1.f,
  TEMP _link,
  DIV(
   TEMP ArraySize.println.1.f.i,
   CONST 10))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP ArraySize.println.1.f.i,
    MUL(
     DIV(
      TEMP ArraySize.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48))),
LABEL L.10,
LABEL L.8
# Linearized (trees):
BGT(
 TEMP ArraySize.println.1.f.i,
 CONST 0,
 L.9, L.10)
LABEL L.9
MOVE(
 TEMP t.37,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP _link,
  DIV(
   TEMP ArraySize.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.37)
MOVE(
 TEMP t.38,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP ArraySize.println.1.f.i,
    MUL(
     DIV(
      TEMP ArraySize.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.38)
LABEL L.10
LABEL L.8
# Basic Blocks:
# 0
LABEL L.26
BGT(
 TEMP ArraySize.println.1.f.i,
 CONST 0,
 L.9, L.10)
# 1
LABEL L.9
MOVE(
 TEMP t.37,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP _link,
  DIV(
   TEMP ArraySize.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.37)
MOVE(
 TEMP t.38,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP ArraySize.println.1.f.i,
    MUL(
     DIV(
      TEMP ArraySize.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.38)
JUMP(
 NAME L.10)
# 2
LABEL L.10
JUMP(
 NAME L.8)
# 3
LABEL L.8
# Trace Scheduled:
LABEL L.26
BGT(
 TEMP ArraySize.println.1.f.i,
 CONST 0,
 L.9, L.10)
LABEL L.10
JUMP(
 NAME L.8)
LABEL L.9
MOVE(
 TEMP t.37,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP _link,
  DIV(
   TEMP ArraySize.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.37)
MOVE(
 TEMP t.38,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP ArraySize.println.1.f.i,
    MUL(
     DIV(
      TEMP ArraySize.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.38)
JUMP(
 NAME L.10)
LABEL L.8
# With procedure entry/exit:
MOVE(
 TEMP _link,
 TEMP %r10)
MOVE(
 TEMP ArraySize.println.1.f.i,
 TEMP %rdi)
LABEL L.26
BGT(
 TEMP ArraySize.println.1.f.i,
 CONST 0,
 L.9, L.10)
LABEL L.10
JUMP(
 NAME L.8)
LABEL L.9
MOVE(
 TEMP t.37,
 CALL(
  NAME ArraySize.println.1.f,
  TEMP _link,
  DIV(
   TEMP ArraySize.println.1.f.i,
   CONST 10)))
EXP(
 TEMP t.37)
MOVE(
 TEMP t.38,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   SUB(
    TEMP ArraySize.println.1.f.i,
    MUL(
     DIV(
      TEMP ArraySize.println.1.f.i,
      CONST 10),
     CONST 10)),
   CONST 48)))
EXP(
 TEMP t.38)
JUMP(
 NAME L.10)
LABEL L.8
# Instructions:
	movq %r10,_link	# _link := %r10 
	movq %rdi,ArraySize.println.1.f.i	# ArraySize.println.1.f.i := %rdi 
L.26:	# <- 
	xorq t.39,t.39	# t.39 <- 
	cmpq t.39,ArraySize.println.1.f.i	# <- ArraySize.println.1.f.i t.39 
	jg L.9	# <- : goto L.9 L.10 
L.10:	# <- 
	jmp L.8	# <- : goto L.8 
L.9:	# <- 
	movq _link,%r10	# %r10 := _link 
	movq $10,t.40	# t.40 <- 
	movq ArraySize.println.1.f.i,%rax	# %rax := ArraySize.println.1.f.i 
	cqto	# %rax %rdx <- %rax 
	idivq t.40	# %rax %rdx <- t.40 %rax %rdx 
	movq %rax,t.41	# t.41 := %rax 
	movq t.41,%rdi	# %rdi := t.41 
	call ArraySize.println.1.f	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %r10 %rdi 
	movq %rax,t.37	# t.37 := %rax 
	movq $10,t.42	# t.42 <- 
	movq ArraySize.println.1.f.i,%rax	# %rax := ArraySize.println.1.f.i 
	cqto	# %rax %rdx <- %rax 
	idivq t.42	# %rax %rdx <- t.42 %rax %rdx 
	movq %rax,t.43	# t.43 := %rax 
	movq t.43,t.44	# t.44 := t.43 
	imulq $10,t.44	# t.44 <- t.44 
	movq ArraySize.println.1.f.i,t.45	# t.45 := ArraySize.println.1.f.i 
	subq t.44,t.45	# t.45 <- t.44 t.45 
	movq t.45,t.46	# t.46 := t.45 
	addq $48,t.46	# t.46 <- t.46 
	movq t.46,%rdi	# %rdi := t.46 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.38	# t.38 := %rax 
	jmp L.10	# <- : goto L.10 
L.8:	# <- 
# Control Flow Graph:
0: _link ArraySize.println.1.f.i <- %r10 %rdi; goto 1
1: t.39 <- ArraySize.println.1.f.i; goto 3 2
2: <-; goto 4
3: %r10 t.40 %rax %rdx t.41 %rdi %rsi %rcx %r8 %r9 %r11 t.37 t.42 t.43 t.44 t.45 t.46 t.38 <- _link ArraySize.println.1.f.i; goto 2
4: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
_link: ArraySize.println.1.f.i %rsp %rbp %rdi t.39 
ArraySize.println.1.f.i: _link %rsp %rbp t.39 t.44 t.43 %rax %rdx t.42 t.37 %rdi %rsi %rcx %r8 %r9 %r10 %r11 t.41 t.40 
t.39: _link ArraySize.println.1.f.i %rsp %rbp 
t.40: %rax %rdx %rsp %rbp ArraySize.println.1.f.i %r10 
t.41: %rsp %rbp ArraySize.println.1.f.i %r10 
t.37: %rsp %rbp ArraySize.println.1.f.i 
t.42: %rax %rdx %rsp %rbp ArraySize.println.1.f.i 
t.43: %rsp %rbp ArraySize.println.1.f.i 
t.44: t.45 %rsp %rbp ArraySize.println.1.f.i 
t.45: %rsp %rbp t.44 
t.46: %rsp %rbp 
t.38: %rsp %rbp 
%r10 <= _link
%rax <= ArraySize.println.1.f.i
t.41 <= %rax
%rdi <= t.41
t.37 <= %rax
%rax <= ArraySize.println.1.f.i
t.43 <= %rax
t.44 <= t.43
t.45 <= ArraySize.println.1.f.i
t.46 <= t.45
%rdi <= t.46
t.38 <= %rax
_link <= %r10
ArraySize.println.1.f.i <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
_link->%r10
ArraySize.println.1.f.i->%rbx
t.39->%rax
t.40->%rcx
t.41->%rax
t.37->%rax
t.42->%rcx
t.43->%rax
t.44->%rax
t.45->%rbx
t.46->%rbx
t.38->%rax
# Assembly code:
	.text
ArraySize.println.1.f:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
#	movq %r10,%r10
	movq %rdi,%rbx
L.26:
	xorq %rax,%rax
	cmpq %rax,%rbx
	jg L.9
L.10:
	jmp L.8
L.9:
#	movq %r10,%r10
	movq $10,%rcx
	movq %rbx,%rax
	cqto
	idivq %rcx
#	movq %rax,%rax
	movq %rax,%rdi
	call ArraySize.println.1.f
#	movq %rax,%rax
	movq $10,%rcx
	movq %rbx,%rax
	cqto
	idivq %rcx
#	movq %rax,%rax
#	movq %rax,%rax
	imulq $10,%rax
#	movq %rbx,%rbx
	subq %rax,%rbx
#	movq %rbx,%rbx
	addq $48,%rbx
	movq %rbx,%rdi
	call putchar
#	movq %rax,%rax
	jmp L.10
L.8:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
ArraySize.println.1.f.badSub:
	call badSub
END ArraySize.println.1.f
PROCEDURE ArraySize
# Trees:
MOVE(
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false),
 ESEQ(
  MOVE(
   TEMP t.1,
   CONST 5),
  BLT(
   TEMP t.1,
   CONST 0,
   ArraySize.badSub, L.11),
  LABEL L.11,
  MOVE(
   TEMP t.2,
   TEMP t.1),
  MOVE(
   TEMP t.3,
   CONST 16),
  MOVE(
   TEMP t.3,
   ADD(
    TEMP t.3,
    MUL(
     TEMP t.2,
     CONST 5))),
  MOVE(
   TEMP t.4,
   CALL(
    NAME malloc,
    CONST 0,
    TEMP t.3)),
  MOVE(
   MEM(
    TEMP t.4, 
    CONST 0, 8, false, false),
   ADD(
    TEMP t.4,
    CONST 16)),
  MOVE(
   MEM(
    TEMP t.4, 
    CONST 8, 8, false, false),
   TEMP t.1),
  MOVE(
   TEMP t.6,
   MEM(
    TEMP t.4, 
    CONST 8, 8, false, false)),
  MOVE(
   TEMP t.7,
   MEM(
    TEMP t.4, 
    CONST 0, 8, false, false)),
  MOVE(
   TEMP t.5,
   CONST 0),
  BGE(
   TEMP t.5,
   TEMP t.6,
   L.14, L.12),
  LABEL L.12,
  MOVE(
   TEMP t.9,
   CONST 5),
  MOVE(
   TEMP t.8,
   CONST 0),
  BGE(
   TEMP t.8,
   TEMP t.9,
   L.16, L.15),
  LABEL L.15,
  MOVE(
   MEM(
    ADD(
     ADD(
      TEMP t.7,
      MUL(
       TEMP t.5,
       CONST 5)),
     TEMP t.8), 
    CONST 0, 1, true, false),
   CONST 0),
  MOVE(
   TEMP t.8,
   ADD(
    TEMP t.8,
    CONST 1)),
  BLT(
   TEMP t.8,
   TEMP t.9,
   L.15, L.16),
  LABEL L.16,
  MOVE(
   TEMP t.5,
   ADD(
    TEMP t.5,
    CONST 1)),
  LABEL L.13,
  BLT(
   TEMP t.5,
   TEMP t.6,
   L.12, L.14),
  LABEL L.14,
  TEMP t.4)),
MOVE(
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false),
 ESEQ(
  MOVE(
   TEMP t.10,
   CONST 5),
  BLT(
   TEMP t.10,
   CONST 0,
   ArraySize.badSub, L.17),
  LABEL L.17,
  MOVE(
   TEMP t.11,
   TEMP t.10),
  MOVE(
   TEMP t.12,
   CONST 16),
  MOVE(
   TEMP t.12,
   ADD(
    TEMP t.12,
    TEMP t.11)),
  MOVE(
   TEMP t.13,
   CALL(
    NAME malloc,
    CONST 0,
    TEMP t.12)),
  MOVE(
   MEM(
    TEMP t.13, 
    CONST 0, 8, false, false),
   ADD(
    TEMP t.13,
    CONST 16)),
  MOVE(
   MEM(
    TEMP t.13, 
    CONST 8, 8, false, false),
   TEMP t.10),
  MOVE(
   TEMP t.15,
   MEM(
    TEMP t.13, 
    CONST 8, 8, false, false)),
  MOVE(
   TEMP t.16,
   MEM(
    TEMP t.13, 
    CONST 0, 8, false, false)),
  MOVE(
   TEMP t.14,
   CONST 0),
  BGE(
   TEMP t.14,
   TEMP t.15,
   L.20, L.18),
  LABEL L.18,
  MOVE(
   MEM(
    ADD(
     TEMP t.16,
     TEMP t.14), 
    CONST 0, 1, false, false),
   CONST 0),
  MOVE(
   TEMP t.14,
   ADD(
    TEMP t.14,
    CONST 1)),
  LABEL L.19,
  BLT(
   TEMP t.14,
   TEMP t.15,
   L.18, L.20),
  LABEL L.20,
  TEMP t.13)),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  ESEQ(
   MOVE(
    TEMP t.18,
    ESEQ(
     MOVE(
      TEMP t.17,
      MEM(
       NAME ArraySize.x, 
       CONST 0, 8, false, false)),
     BEQ(
      TEMP t.17,
      CONST 0,
      ArraySize.badPtr, L.21),
     LABEL L.21,
     TEMP t.17)),
   MOVE(
    TEMP t.19,
    MEM(
     TEMP t.18, 
     CONST 8, 8, false, false)),
   MOVE(
    TEMP t.19,
    MUL(
     TEMP t.19,
     CONST 40)),
   TEMP t.19))),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  ESEQ(
   MOVE(
    TEMP t.21,
    ESEQ(
     MOVE(
      TEMP t.20,
      MEM(
       NAME ArraySize.x, 
       CONST 0, 8, false, false)),
     BEQ(
      TEMP t.20,
      CONST 0,
      ArraySize.badPtr, L.22),
     LABEL L.22,
     TEMP t.20)),
   MOVE(
    TEMP t.22,
    MEM(
     TEMP t.21, 
     CONST 8, 8, false, false)),
   MOVE(
    TEMP t.22,
    MUL(
     TEMP t.22,
     CONST 5)),
   TEMP t.22))),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 40)),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 5)),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  ESEQ(
   MOVE(
    TEMP t.24,
    ESEQ(
     MOVE(
      TEMP t.23,
      MEM(
       NAME ArraySize.y, 
       CONST 0, 8, false, false)),
     BEQ(
      TEMP t.23,
      CONST 0,
      ArraySize.badPtr, L.23),
     LABEL L.23,
     TEMP t.23)),
   MOVE(
    TEMP t.25,
    MEM(
     TEMP t.24, 
     CONST 8, 8, false, false)),
   MOVE(
    TEMP t.25,
    MUL(
     TEMP t.25,
     CONST 8)),
   TEMP t.25))),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  ESEQ(
   MOVE(
    TEMP t.27,
    ESEQ(
     MOVE(
      TEMP t.26,
      MEM(
       NAME ArraySize.y, 
       CONST 0, 8, false, false)),
     BEQ(
      TEMP t.26,
      CONST 0,
      ArraySize.badPtr, L.24),
     LABEL L.24,
     TEMP t.26)),
   MOVE(
    TEMP t.28,
    MEM(
     TEMP t.27, 
     CONST 8, 8, false, false)),
   MOVE(
    TEMP t.28,
    TEMP t.28),
   TEMP t.28))),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 3)),
EXP(
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 1))
# Linearized (trees):
MOVE(
 TEMP t.1,
 CONST 5)
BLT(
 TEMP t.1,
 CONST 0,
 ArraySize.badSub, L.11)
LABEL L.11
MOVE(
 TEMP t.2,
 TEMP t.1)
MOVE(
 TEMP t.3,
 CONST 16)
MOVE(
 TEMP t.3,
 ADD(
  TEMP t.3,
  MUL(
   TEMP t.2,
   CONST 5)))
MOVE(
 TEMP t.4,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.3))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.4,
  CONST 16))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false),
 TEMP t.1)
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.7,
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.5,
 CONST 0)
BGE(
 TEMP t.5,
 TEMP t.6,
 L.14, L.12)
LABEL L.12
MOVE(
 TEMP t.9,
 CONST 5)
MOVE(
 TEMP t.8,
 CONST 0)
BGE(
 TEMP t.8,
 TEMP t.9,
 L.16, L.15)
LABEL L.15
MOVE(
 MEM(
  ADD(
   ADD(
    TEMP t.7,
    MUL(
     TEMP t.5,
     CONST 5)),
   TEMP t.8), 
  CONST 0, 1, true, false),
 CONST 0)
MOVE(
 TEMP t.8,
 ADD(
  TEMP t.8,
  CONST 1))
BLT(
 TEMP t.8,
 TEMP t.9,
 L.15, L.16)
LABEL L.16
MOVE(
 TEMP t.5,
 ADD(
  TEMP t.5,
  CONST 1))
LABEL L.13
BLT(
 TEMP t.5,
 TEMP t.6,
 L.12, L.14)
LABEL L.14
MOVE(
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false),
 TEMP t.4)
MOVE(
 TEMP t.10,
 CONST 5)
BLT(
 TEMP t.10,
 CONST 0,
 ArraySize.badSub, L.17)
LABEL L.17
MOVE(
 TEMP t.11,
 TEMP t.10)
MOVE(
 TEMP t.12,
 CONST 16)
MOVE(
 TEMP t.12,
 ADD(
  TEMP t.12,
  TEMP t.11))
MOVE(
 TEMP t.13,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.12))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.13,
  CONST 16))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false),
 TEMP t.10)
MOVE(
 TEMP t.15,
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.16,
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.14,
 CONST 0)
BGE(
 TEMP t.14,
 TEMP t.15,
 L.20, L.18)
LABEL L.18
MOVE(
 MEM(
  ADD(
   TEMP t.16,
   TEMP t.14), 
  CONST 0, 1, false, false),
 CONST 0)
MOVE(
 TEMP t.14,
 ADD(
  TEMP t.14,
  CONST 1))
LABEL L.19
BLT(
 TEMP t.14,
 TEMP t.15,
 L.18, L.20)
LABEL L.20
MOVE(
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false),
 TEMP t.13)
MOVE(
 TEMP t.17,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.17,
 CONST 0,
 ArraySize.badPtr, L.21)
LABEL L.21
MOVE(
 TEMP t.18,
 TEMP t.17)
MOVE(
 TEMP t.19,
 MEM(
  TEMP t.18, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.19,
 MUL(
  TEMP t.19,
  CONST 40))
MOVE(
 TEMP t.47,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.19))
EXP(
 TEMP t.47)
MOVE(
 TEMP t.20,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.20,
 CONST 0,
 ArraySize.badPtr, L.22)
LABEL L.22
MOVE(
 TEMP t.21,
 TEMP t.20)
MOVE(
 TEMP t.22,
 MEM(
  TEMP t.21, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.22,
 MUL(
  TEMP t.22,
  CONST 5))
MOVE(
 TEMP t.48,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.22))
EXP(
 TEMP t.48)
MOVE(
 TEMP t.49,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 40))
EXP(
 TEMP t.49)
MOVE(
 TEMP t.50,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 5))
EXP(
 TEMP t.50)
MOVE(
 TEMP t.23,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.23,
 CONST 0,
 ArraySize.badPtr, L.23)
LABEL L.23
MOVE(
 TEMP t.24,
 TEMP t.23)
MOVE(
 TEMP t.25,
 MEM(
  TEMP t.24, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.25,
 MUL(
  TEMP t.25,
  CONST 8))
MOVE(
 TEMP t.51,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.25))
EXP(
 TEMP t.51)
MOVE(
 TEMP t.26,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.26,
 CONST 0,
 ArraySize.badPtr, L.24)
LABEL L.24
MOVE(
 TEMP t.27,
 TEMP t.26)
MOVE(
 TEMP t.28,
 MEM(
  TEMP t.27, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.28,
 TEMP t.28)
MOVE(
 TEMP t.52,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.28))
EXP(
 TEMP t.52)
MOVE(
 TEMP t.53,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 3))
EXP(
 TEMP t.53)
MOVE(
 TEMP t.54,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 1))
EXP(
 TEMP t.54)
# Basic Blocks:
# 0
LABEL L.27
MOVE(
 TEMP t.1,
 CONST 5)
BLT(
 TEMP t.1,
 CONST 0,
 ArraySize.badSub, L.11)
# 1
LABEL L.11
MOVE(
 TEMP t.2,
 TEMP t.1)
MOVE(
 TEMP t.3,
 CONST 16)
MOVE(
 TEMP t.3,
 ADD(
  TEMP t.3,
  MUL(
   TEMP t.2,
   CONST 5)))
MOVE(
 TEMP t.4,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.3))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.4,
  CONST 16))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false),
 TEMP t.1)
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.7,
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.5,
 CONST 0)
BGE(
 TEMP t.5,
 TEMP t.6,
 L.14, L.12)
# 2
LABEL L.12
MOVE(
 TEMP t.9,
 CONST 5)
MOVE(
 TEMP t.8,
 CONST 0)
BGE(
 TEMP t.8,
 TEMP t.9,
 L.16, L.15)
# 3
LABEL L.15
MOVE(
 MEM(
  ADD(
   ADD(
    TEMP t.7,
    MUL(
     TEMP t.5,
     CONST 5)),
   TEMP t.8), 
  CONST 0, 1, true, false),
 CONST 0)
MOVE(
 TEMP t.8,
 ADD(
  TEMP t.8,
  CONST 1))
BLT(
 TEMP t.8,
 TEMP t.9,
 L.15, L.16)
# 4
LABEL L.16
MOVE(
 TEMP t.5,
 ADD(
  TEMP t.5,
  CONST 1))
JUMP(
 NAME L.13)
# 5
LABEL L.13
BLT(
 TEMP t.5,
 TEMP t.6,
 L.12, L.14)
# 6
LABEL L.14
MOVE(
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false),
 TEMP t.4)
MOVE(
 TEMP t.10,
 CONST 5)
BLT(
 TEMP t.10,
 CONST 0,
 ArraySize.badSub, L.17)
# 7
LABEL L.17
MOVE(
 TEMP t.11,
 TEMP t.10)
MOVE(
 TEMP t.12,
 CONST 16)
MOVE(
 TEMP t.12,
 ADD(
  TEMP t.12,
  TEMP t.11))
MOVE(
 TEMP t.13,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.12))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.13,
  CONST 16))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false),
 TEMP t.10)
MOVE(
 TEMP t.15,
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.16,
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.14,
 CONST 0)
BGE(
 TEMP t.14,
 TEMP t.15,
 L.20, L.18)
# 8
LABEL L.18
MOVE(
 MEM(
  ADD(
   TEMP t.16,
   TEMP t.14), 
  CONST 0, 1, false, false),
 CONST 0)
MOVE(
 TEMP t.14,
 ADD(
  TEMP t.14,
  CONST 1))
JUMP(
 NAME L.19)
# 9
LABEL L.19
BLT(
 TEMP t.14,
 TEMP t.15,
 L.18, L.20)
# 10
LABEL L.20
MOVE(
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false),
 TEMP t.13)
MOVE(
 TEMP t.17,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.17,
 CONST 0,
 ArraySize.badPtr, L.21)
# 11
LABEL L.21
MOVE(
 TEMP t.18,
 TEMP t.17)
MOVE(
 TEMP t.19,
 MEM(
  TEMP t.18, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.19,
 MUL(
  TEMP t.19,
  CONST 40))
MOVE(
 TEMP t.47,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.19))
EXP(
 TEMP t.47)
MOVE(
 TEMP t.20,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.20,
 CONST 0,
 ArraySize.badPtr, L.22)
# 12
LABEL L.22
MOVE(
 TEMP t.21,
 TEMP t.20)
MOVE(
 TEMP t.22,
 MEM(
  TEMP t.21, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.22,
 MUL(
  TEMP t.22,
  CONST 5))
MOVE(
 TEMP t.48,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.22))
EXP(
 TEMP t.48)
MOVE(
 TEMP t.49,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 40))
EXP(
 TEMP t.49)
MOVE(
 TEMP t.50,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 5))
EXP(
 TEMP t.50)
MOVE(
 TEMP t.23,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.23,
 CONST 0,
 ArraySize.badPtr, L.23)
# 13
LABEL L.23
MOVE(
 TEMP t.24,
 TEMP t.23)
MOVE(
 TEMP t.25,
 MEM(
  TEMP t.24, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.25,
 MUL(
  TEMP t.25,
  CONST 8))
MOVE(
 TEMP t.51,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.25))
EXP(
 TEMP t.51)
MOVE(
 TEMP t.26,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.26,
 CONST 0,
 ArraySize.badPtr, L.24)
# 14
LABEL L.24
MOVE(
 TEMP t.27,
 TEMP t.26)
MOVE(
 TEMP t.28,
 MEM(
  TEMP t.27, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.28,
 TEMP t.28)
MOVE(
 TEMP t.52,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.28))
EXP(
 TEMP t.52)
MOVE(
 TEMP t.53,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 3))
EXP(
 TEMP t.53)
MOVE(
 TEMP t.54,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 1))
EXP(
 TEMP t.54)
# Trace Scheduled:
LABEL L.27
MOVE(
 TEMP t.1,
 CONST 5)
BLT(
 TEMP t.1,
 CONST 0,
 ArraySize.badSub, L.11)
LABEL L.11
MOVE(
 TEMP t.2,
 TEMP t.1)
MOVE(
 TEMP t.3,
 CONST 16)
MOVE(
 TEMP t.3,
 ADD(
  TEMP t.3,
  MUL(
   TEMP t.2,
   CONST 5)))
MOVE(
 TEMP t.4,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.3))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.4,
  CONST 16))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false),
 TEMP t.1)
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.7,
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.5,
 CONST 0)
BGE(
 TEMP t.5,
 TEMP t.6,
 L.14, L.12)
LABEL L.12
MOVE(
 TEMP t.9,
 CONST 5)
MOVE(
 TEMP t.8,
 CONST 0)
BGE(
 TEMP t.8,
 TEMP t.9,
 L.16, L.15)
LABEL L.15
MOVE(
 MEM(
  ADD(
   ADD(
    TEMP t.7,
    MUL(
     TEMP t.5,
     CONST 5)),
   TEMP t.8), 
  CONST 0, 1, true, false),
 CONST 0)
MOVE(
 TEMP t.8,
 ADD(
  TEMP t.8,
  CONST 1))
BLT(
 TEMP t.8,
 TEMP t.9,
 L.15, L.16)
LABEL L.16
MOVE(
 TEMP t.5,
 ADD(
  TEMP t.5,
  CONST 1))
LABEL L.13
BLT(
 TEMP t.5,
 TEMP t.6,
 L.12, L.14)
LABEL L.14
MOVE(
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false),
 TEMP t.4)
MOVE(
 TEMP t.10,
 CONST 5)
BLT(
 TEMP t.10,
 CONST 0,
 ArraySize.badSub, L.17)
LABEL L.17
MOVE(
 TEMP t.11,
 TEMP t.10)
MOVE(
 TEMP t.12,
 CONST 16)
MOVE(
 TEMP t.12,
 ADD(
  TEMP t.12,
  TEMP t.11))
MOVE(
 TEMP t.13,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.12))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.13,
  CONST 16))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false),
 TEMP t.10)
MOVE(
 TEMP t.15,
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.16,
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.14,
 CONST 0)
BGE(
 TEMP t.14,
 TEMP t.15,
 L.20, L.18)
LABEL L.18
MOVE(
 MEM(
  ADD(
   TEMP t.16,
   TEMP t.14), 
  CONST 0, 1, false, false),
 CONST 0)
MOVE(
 TEMP t.14,
 ADD(
  TEMP t.14,
  CONST 1))
LABEL L.19
BLT(
 TEMP t.14,
 TEMP t.15,
 L.18, L.20)
LABEL L.20
MOVE(
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false),
 TEMP t.13)
MOVE(
 TEMP t.17,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.17,
 CONST 0,
 ArraySize.badPtr, L.21)
LABEL L.21
MOVE(
 TEMP t.18,
 TEMP t.17)
MOVE(
 TEMP t.19,
 MEM(
  TEMP t.18, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.19,
 MUL(
  TEMP t.19,
  CONST 40))
MOVE(
 TEMP t.47,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.19))
EXP(
 TEMP t.47)
MOVE(
 TEMP t.20,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.20,
 CONST 0,
 ArraySize.badPtr, L.22)
LABEL L.22
MOVE(
 TEMP t.21,
 TEMP t.20)
MOVE(
 TEMP t.22,
 MEM(
  TEMP t.21, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.22,
 MUL(
  TEMP t.22,
  CONST 5))
MOVE(
 TEMP t.48,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.22))
EXP(
 TEMP t.48)
MOVE(
 TEMP t.49,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 40))
EXP(
 TEMP t.49)
MOVE(
 TEMP t.50,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 5))
EXP(
 TEMP t.50)
MOVE(
 TEMP t.23,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.23,
 CONST 0,
 ArraySize.badPtr, L.23)
LABEL L.23
MOVE(
 TEMP t.24,
 TEMP t.23)
MOVE(
 TEMP t.25,
 MEM(
  TEMP t.24, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.25,
 MUL(
  TEMP t.25,
  CONST 8))
MOVE(
 TEMP t.51,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.25))
EXP(
 TEMP t.51)
MOVE(
 TEMP t.26,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.26,
 CONST 0,
 ArraySize.badPtr, L.24)
LABEL L.24
MOVE(
 TEMP t.27,
 TEMP t.26)
MOVE(
 TEMP t.28,
 MEM(
  TEMP t.27, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.28,
 TEMP t.28)
MOVE(
 TEMP t.52,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.28))
EXP(
 TEMP t.52)
MOVE(
 TEMP t.53,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 3))
EXP(
 TEMP t.53)
MOVE(
 TEMP t.54,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 1))
EXP(
 TEMP t.54)
# With procedure entry/exit:
LABEL L.27
MOVE(
 TEMP t.1,
 CONST 5)
BLT(
 TEMP t.1,
 CONST 0,
 ArraySize.badSub, L.11)
LABEL L.11
MOVE(
 TEMP t.2,
 TEMP t.1)
MOVE(
 TEMP t.3,
 CONST 16)
MOVE(
 TEMP t.3,
 ADD(
  TEMP t.3,
  MUL(
   TEMP t.2,
   CONST 5)))
MOVE(
 TEMP t.4,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.3))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.4,
  CONST 16))
MOVE(
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false),
 TEMP t.1)
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.4, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.7,
 MEM(
  TEMP t.4, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.5,
 CONST 0)
BGE(
 TEMP t.5,
 TEMP t.6,
 L.14, L.12)
LABEL L.12
MOVE(
 TEMP t.9,
 CONST 5)
MOVE(
 TEMP t.8,
 CONST 0)
BGE(
 TEMP t.8,
 TEMP t.9,
 L.16, L.15)
LABEL L.15
MOVE(
 MEM(
  ADD(
   ADD(
    TEMP t.7,
    MUL(
     TEMP t.5,
     CONST 5)),
   TEMP t.8), 
  CONST 0, 1, true, false),
 CONST 0)
MOVE(
 TEMP t.8,
 ADD(
  TEMP t.8,
  CONST 1))
BLT(
 TEMP t.8,
 TEMP t.9,
 L.15, L.16)
LABEL L.16
MOVE(
 TEMP t.5,
 ADD(
  TEMP t.5,
  CONST 1))
LABEL L.13
BLT(
 TEMP t.5,
 TEMP t.6,
 L.12, L.14)
LABEL L.14
MOVE(
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false),
 TEMP t.4)
MOVE(
 TEMP t.10,
 CONST 5)
BLT(
 TEMP t.10,
 CONST 0,
 ArraySize.badSub, L.17)
LABEL L.17
MOVE(
 TEMP t.11,
 TEMP t.10)
MOVE(
 TEMP t.12,
 CONST 16)
MOVE(
 TEMP t.12,
 ADD(
  TEMP t.12,
  TEMP t.11))
MOVE(
 TEMP t.13,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.12))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false),
 ADD(
  TEMP t.13,
  CONST 16))
MOVE(
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false),
 TEMP t.10)
MOVE(
 TEMP t.15,
 MEM(
  TEMP t.13, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.16,
 MEM(
  TEMP t.13, 
  CONST 0, 8, false, false))
MOVE(
 TEMP t.14,
 CONST 0)
BGE(
 TEMP t.14,
 TEMP t.15,
 L.20, L.18)
LABEL L.18
MOVE(
 MEM(
  ADD(
   TEMP t.16,
   TEMP t.14), 
  CONST 0, 1, false, false),
 CONST 0)
MOVE(
 TEMP t.14,
 ADD(
  TEMP t.14,
  CONST 1))
LABEL L.19
BLT(
 TEMP t.14,
 TEMP t.15,
 L.18, L.20)
LABEL L.20
MOVE(
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false),
 TEMP t.13)
MOVE(
 TEMP t.17,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.17,
 CONST 0,
 ArraySize.badPtr, L.21)
LABEL L.21
MOVE(
 TEMP t.18,
 TEMP t.17)
MOVE(
 TEMP t.19,
 MEM(
  TEMP t.18, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.19,
 MUL(
  TEMP t.19,
  CONST 40))
MOVE(
 TEMP t.47,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.19))
EXP(
 TEMP t.47)
MOVE(
 TEMP t.20,
 MEM(
  NAME ArraySize.x, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.20,
 CONST 0,
 ArraySize.badPtr, L.22)
LABEL L.22
MOVE(
 TEMP t.21,
 TEMP t.20)
MOVE(
 TEMP t.22,
 MEM(
  TEMP t.21, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.22,
 MUL(
  TEMP t.22,
  CONST 5))
MOVE(
 TEMP t.48,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.22))
EXP(
 TEMP t.48)
MOVE(
 TEMP t.49,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 40))
EXP(
 TEMP t.49)
MOVE(
 TEMP t.50,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 5))
EXP(
 TEMP t.50)
MOVE(
 TEMP t.23,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.23,
 CONST 0,
 ArraySize.badPtr, L.23)
LABEL L.23
MOVE(
 TEMP t.24,
 TEMP t.23)
MOVE(
 TEMP t.25,
 MEM(
  TEMP t.24, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.25,
 MUL(
  TEMP t.25,
  CONST 8))
MOVE(
 TEMP t.51,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.25))
EXP(
 TEMP t.51)
MOVE(
 TEMP t.26,
 MEM(
  NAME ArraySize.y, 
  CONST 0, 8, false, false))
BEQ(
 TEMP t.26,
 CONST 0,
 ArraySize.badPtr, L.24)
LABEL L.24
MOVE(
 TEMP t.27,
 TEMP t.26)
MOVE(
 TEMP t.28,
 MEM(
  TEMP t.27, 
  CONST 8, 8, false, false))
MOVE(
 TEMP t.28,
 TEMP t.28)
MOVE(
 TEMP t.52,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  TEMP t.28))
EXP(
 TEMP t.52)
MOVE(
 TEMP t.53,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 3))
EXP(
 TEMP t.53)
MOVE(
 TEMP t.54,
 CALL(
  NAME ArraySize.println,
  CONST 0,
  CONST 1))
EXP(
 TEMP t.54)
# Instructions:
L.27:	# <- 
	movq $5,t.1	# t.1 <- 
	xorq t.55,t.55	# t.55 <- 
	cmpq t.55,t.1	# <- t.1 t.55 
	jl ArraySize.badSub	# <- : goto ArraySize.badSub L.11 
L.11:	# <- 
	movq t.1,t.2	# t.2 := t.1 
	movq $16,t.3	# t.3 <- 
	movq t.2,t.56	# t.56 := t.2 
	imulq $5,t.56	# t.56 <- t.56 
	movq t.3,t.57	# t.57 := t.3 
	addq t.56,t.57	# t.57 <- t.56 t.57 
	movq t.57,t.3	# t.3 := t.57 
	movq t.3,%rdi	# %rdi := t.3 
	call malloc	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.4	# t.4 := %rax 
	movq t.4,t.58	# t.58 := t.4 
	addq $16,t.58	# t.58 <- t.58 
	movq t.58,0(t.4)	# <- t.4 t.58 
	movq t.1,8(t.4)	# <- t.4 t.1 
	movq 8(t.4),t.59	# t.59 <- t.4 
	movq t.59,t.6	# t.6 := t.59 
	movq 0(t.4),t.60	# t.60 <- t.4 
	movq t.60,t.7	# t.7 := t.60 
	xorq t.5,t.5	# t.5 <- 
	cmpq t.6,t.5	# <- t.5 t.6 
	jge L.14	# <- : goto L.14 L.12 
L.12:	# <- 
	movq $5,t.9	# t.9 <- 
	xorq t.8,t.8	# t.8 <- 
	cmpq t.9,t.8	# <- t.8 t.9 
	jge L.16	# <- : goto L.16 L.15 
L.15:	# <- 
	movq t.5,t.61	# t.61 := t.5 
	imulq $5,t.61	# t.61 <- t.61 
	movq t.7,t.62	# t.62 := t.7 
	addq t.61,t.62	# t.62 <- t.61 t.62 
	movq t.62,t.63	# t.63 := t.62 
	addq t.8,t.63	# t.63 <- t.8 t.63 
	movb $0,0(t.63)	# <- t.63 
	movq t.8,t.64	# t.64 := t.8 
	addq $1,t.64	# t.64 <- t.64 
	movq t.64,t.8	# t.8 := t.64 
	cmpq t.9,t.8	# <- t.8 t.9 
	jl L.15	# <- : goto L.15 L.16 
L.16:	# <- 
	movq t.5,t.65	# t.65 := t.5 
	addq $1,t.65	# t.65 <- t.65 
	movq t.65,t.5	# t.5 := t.65 
L.13:	# <- 
	cmpq t.6,t.5	# <- t.5 t.6 
	jl L.12	# <- : goto L.12 L.14 
L.14:	# <- 
	leaq ArraySize.x(%rip),t.66	# t.66 <- 
	movq t.4,0(t.66)	# <- t.66 t.4 
	movq $5,t.10	# t.10 <- 
	xorq t.67,t.67	# t.67 <- 
	cmpq t.67,t.10	# <- t.10 t.67 
	jl ArraySize.badSub	# <- : goto ArraySize.badSub L.17 
L.17:	# <- 
	movq t.10,t.11	# t.11 := t.10 
	movq $16,t.12	# t.12 <- 
	movq t.12,t.68	# t.68 := t.12 
	addq t.11,t.68	# t.68 <- t.11 t.68 
	movq t.68,t.12	# t.12 := t.68 
	movq t.12,%rdi	# %rdi := t.12 
	call malloc	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.13	# t.13 := %rax 
	movq t.13,t.69	# t.69 := t.13 
	addq $16,t.69	# t.69 <- t.69 
	movq t.69,0(t.13)	# <- t.13 t.69 
	movq t.10,8(t.13)	# <- t.13 t.10 
	movq 8(t.13),t.70	# t.70 <- t.13 
	movq t.70,t.15	# t.15 := t.70 
	movq 0(t.13),t.71	# t.71 <- t.13 
	movq t.71,t.16	# t.16 := t.71 
	xorq t.14,t.14	# t.14 <- 
	cmpq t.15,t.14	# <- t.14 t.15 
	jge L.20	# <- : goto L.20 L.18 
L.18:	# <- 
	movq t.16,t.72	# t.72 := t.16 
	addq t.14,t.72	# t.72 <- t.14 t.72 
	movb $0,0(t.72)	# <- t.72 
	movq t.14,t.73	# t.73 := t.14 
	addq $1,t.73	# t.73 <- t.73 
	movq t.73,t.14	# t.14 := t.73 
L.19:	# <- 
	cmpq t.15,t.14	# <- t.14 t.15 
	jl L.18	# <- : goto L.18 L.20 
L.20:	# <- 
	leaq ArraySize.y(%rip),t.74	# t.74 <- 
	movq t.13,0(t.74)	# <- t.74 t.13 
	leaq ArraySize.x(%rip),t.75	# t.75 <- 
	movq 0(t.75),t.76	# t.76 <- t.75 
	movq t.76,t.17	# t.17 := t.76 
	xorq t.77,t.77	# t.77 <- 
	cmpq t.77,t.17	# <- t.17 t.77 
	je ArraySize.badPtr	# <- : goto ArraySize.badPtr L.21 
L.21:	# <- 
	movq t.17,t.18	# t.18 := t.17 
	movq 8(t.18),t.78	# t.78 <- t.18 
	movq t.78,t.19	# t.19 := t.78 
	movq t.19,t.79	# t.79 := t.19 
	imulq $40,t.79	# t.79 <- t.79 
	movq t.79,t.19	# t.19 := t.79 
	movq t.19,%rdi	# %rdi := t.19 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.47	# t.47 := %rax 
	leaq ArraySize.x(%rip),t.80	# t.80 <- 
	movq 0(t.80),t.81	# t.81 <- t.80 
	movq t.81,t.20	# t.20 := t.81 
	xorq t.82,t.82	# t.82 <- 
	cmpq t.82,t.20	# <- t.20 t.82 
	je ArraySize.badPtr	# <- : goto ArraySize.badPtr L.22 
L.22:	# <- 
	movq t.20,t.21	# t.21 := t.20 
	movq 8(t.21),t.83	# t.83 <- t.21 
	movq t.83,t.22	# t.22 := t.83 
	movq t.22,t.84	# t.84 := t.22 
	imulq $5,t.84	# t.84 <- t.84 
	movq t.84,t.22	# t.22 := t.84 
	movq t.22,%rdi	# %rdi := t.22 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.48	# t.48 := %rax 
	movq $40,%rdi	# %rdi <- 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.49	# t.49 := %rax 
	movq $5,%rdi	# %rdi <- 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.50	# t.50 := %rax 
	leaq ArraySize.y(%rip),t.85	# t.85 <- 
	movq 0(t.85),t.86	# t.86 <- t.85 
	movq t.86,t.23	# t.23 := t.86 
	xorq t.87,t.87	# t.87 <- 
	cmpq t.87,t.23	# <- t.23 t.87 
	je ArraySize.badPtr	# <- : goto ArraySize.badPtr L.23 
L.23:	# <- 
	movq t.23,t.24	# t.24 := t.23 
	movq 8(t.24),t.88	# t.88 <- t.24 
	movq t.88,t.25	# t.25 := t.88 
	movq t.25,t.89	# t.89 := t.25 
	shlq $3,t.89	# t.89 <- t.89 
	movq t.89,t.25	# t.25 := t.89 
	movq t.25,%rdi	# %rdi := t.25 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.51	# t.51 := %rax 
	leaq ArraySize.y(%rip),t.90	# t.90 <- 
	movq 0(t.90),t.91	# t.91 <- t.90 
	movq t.91,t.26	# t.26 := t.91 
	xorq t.92,t.92	# t.92 <- 
	cmpq t.92,t.26	# <- t.26 t.92 
	je ArraySize.badPtr	# <- : goto ArraySize.badPtr L.24 
L.24:	# <- 
	movq t.26,t.27	# t.27 := t.26 
	movq 8(t.27),t.93	# t.93 <- t.27 
	movq t.93,t.28	# t.28 := t.93 
#	movq t.28,t.28	# t.28 := t.28 
	movq t.28,%rdi	# %rdi := t.28 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.52	# t.52 := %rax 
	movq $3,%rdi	# %rdi <- 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.53	# t.53 := %rax 
	movq $1,%rdi	# %rdi <- 
	call ArraySize.println	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.54	# t.54 := %rax 
# Control Flow Graph:
0: t.1 t.55 <-; goto 1
1: t.2 t.3 t.56 t.57 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.4 t.58 t.59 t.6 t.60 t.7 t.5 <- t.1; goto 6 2
2: t.9 t.8 <-; goto 4 3
3: t.61 t.62 t.63 t.64 t.8 <- t.5 t.7 t.8 t.9; goto 3 4
4: t.65 t.5 <- t.5; goto 5
5: <- t.5 t.6; goto 2 6
6: t.66 t.10 t.67 <- t.4; goto 7
7: t.11 t.12 t.68 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.13 t.69 t.70 t.15 t.71 t.16 t.14 <- t.10; goto 10 8
8: t.72 t.73 t.14 <- t.16 t.14; goto 9
9: <- t.14 t.15; goto 8 10
10: t.74 t.75 t.76 t.17 t.77 <- t.13; goto 11
11: t.18 t.78 t.19 t.79 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.47 t.80 t.81 t.20 t.82 <- t.17; goto 12
12: t.21 t.83 t.22 t.84 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.48 t.49 t.50 t.85 t.86 t.23 t.87 <- t.20; goto 13
13: t.24 t.88 t.25 t.89 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.51 t.90 t.91 t.26 t.92 <- t.23; goto 14
14: t.27 t.93 t.28 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.52 t.53 t.54 <- t.26 %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.1: t.55 %rsp %rbp t.58 t.4 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.3 t.57 t.56 
t.55: t.1 %rsp %rbp 
t.2: t.3 %rsp %rbp 
t.3: %rsp %rbp t.1 t.56 t.2 
t.56: t.57 %rsp %rbp t.1 t.3 
t.57: %rsp %rbp t.1 t.56 
t.4: t.5 t.7 t.60 t.6 t.59 t.58 %rsp %rbp t.1 t.8 t.9 t.64 t.63 t.62 t.61 t.65 t.66 
t.58: t.4 %rsp %rbp t.1 
t.59: t.4 %rsp %rbp 
t.6: t.5 t.7 t.60 t.4 %rsp %rbp t.8 t.9 t.64 t.63 t.62 t.61 t.65 
t.60: t.4 %rsp %rbp t.6 
t.7: t.5 t.4 %rsp %rbp t.6 t.8 t.9 t.64 t.63 t.62 t.61 t.65 
t.5: t.4 %rsp %rbp t.6 t.7 t.8 t.9 t.64 t.63 t.62 t.61 
t.9: t.8 t.5 t.6 t.4 %rsp %rbp t.7 t.64 t.63 t.62 t.61 
t.8: t.5 t.6 t.4 %rsp %rbp t.7 t.9 t.63 t.62 t.61 
t.61: t.62 t.5 t.7 t.9 t.6 t.4 %rsp %rbp t.8 
t.62: t.5 t.7 t.9 t.6 t.4 %rsp %rbp t.8 t.61 
t.63: t.5 t.7 t.9 t.6 t.4 %rsp %rbp t.8 
t.64: t.5 t.7 t.9 t.6 t.4 %rsp %rbp 
t.65: t.6 t.4 %rsp %rbp t.7 
t.66: %rsp %rbp t.4 
t.10: t.67 %rsp %rbp t.69 t.13 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.12 t.68 
t.67: t.10 %rsp %rbp 
t.11: t.68 t.12 %rsp %rbp 
t.12: %rsp %rbp t.10 t.11 
t.68: %rsp %rbp t.10 t.11 
t.13: t.14 t.16 t.71 t.15 t.70 t.69 %rsp %rbp t.10 t.73 t.72 t.74 
t.69: t.13 %rsp %rbp t.10 
t.70: t.13 %rsp %rbp 
t.15: t.14 t.16 t.71 t.13 %rsp %rbp t.73 t.72 
t.71: t.13 %rsp %rbp t.15 
t.16: t.14 t.13 %rsp %rbp t.15 t.73 t.72 
t.14: t.13 %rsp %rbp t.16 t.15 t.72 
t.72: t.15 t.16 t.13 %rsp %rbp t.14 
t.73: t.15 t.16 t.13 %rsp %rbp 
t.74: %rsp %rbp t.13 
t.75: %rsp %rbp 
t.76: %rsp %rbp 
t.17: t.77 %rsp %rbp 
t.77: t.17 %rsp %rbp 
t.18: %rsp %rbp 
t.78: %rsp %rbp 
t.19: %rsp %rbp 
t.79: %rsp %rbp 
t.47: %rsp %rbp 
t.80: %rsp %rbp 
t.81: %rsp %rbp 
t.20: t.82 %rsp %rbp 
t.82: t.20 %rsp %rbp 
t.21: %rsp %rbp 
t.83: %rsp %rbp 
t.22: %rsp %rbp 
t.84: %rsp %rbp 
t.48: %rsp %rbp 
t.49: %rsp %rbp 
t.50: %rsp %rbp 
t.85: %rsp %rbp 
t.86: %rsp %rbp 
t.23: t.87 %rsp %rbp 
t.87: t.23 %rsp %rbp 
t.24: %rsp %rbp 
t.88: %rsp %rbp 
t.25: %rsp %rbp 
t.89: %rsp %rbp 
t.51: %rsp %rbp 
t.90: %rsp %rbp 
t.91: %rsp %rbp 
t.26: t.92 %rsp %rbp 
t.92: t.26 %rsp %rbp 
t.27: %rsp %rbp 
t.93: %rsp %rbp 
t.28: %rsp %rbp 
t.52: %rsp %rbp 
t.53: %rsp %rbp 
t.54: %rsp %rbp 
t.27 <= t.26
t.28 <= t.93
t.28 <= t.28
%rdi <= t.28
t.52 <= %rax
t.53 <= %rax
t.54 <= %rax
t.24 <= t.23
t.25 <= t.88
t.89 <= t.25
t.25 <= t.89
%rdi <= t.25
t.51 <= %rax
t.26 <= t.91
t.21 <= t.20
t.22 <= t.83
t.84 <= t.22
t.22 <= t.84
%rdi <= t.22
t.48 <= %rax
t.49 <= %rax
t.50 <= %rax
t.23 <= t.86
t.18 <= t.17
t.19 <= t.78
t.79 <= t.19
t.19 <= t.79
%rdi <= t.19
t.47 <= %rax
t.20 <= t.81
t.17 <= t.76
t.72 <= t.16
t.73 <= t.14
t.14 <= t.73
t.11 <= t.10
t.68 <= t.12
t.12 <= t.68
%rdi <= t.12
t.13 <= %rax
t.69 <= t.13
t.15 <= t.70
t.16 <= t.71
t.65 <= t.5
t.5 <= t.65
t.61 <= t.5
t.62 <= t.7
t.63 <= t.62
t.64 <= t.8
t.8 <= t.64
t.2 <= t.1
t.56 <= t.2
t.57 <= t.3
t.3 <= t.57
%rdi <= t.3
t.4 <= %rax
t.58 <= t.4
t.6 <= t.59
t.7 <= t.60
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.1->%r12
t.55->%rax
t.2->%r12
t.3->%rdi
t.56->%rax
t.57->%rdi
t.4->%rax
t.58->%rbx
t.59->%rcx
t.6->%rcx
t.60->%rbx
t.7->%rbx
t.5->%r8
t.9->%r9
t.8->%rdx
t.61->%rdi
t.62->%rsi
t.63->%rsi
t.64->%rdx
t.65->%r8
t.66->%rbx
t.10->%r12
t.67->%rax
t.11->%r12
t.12->%rdi
t.68->%rdi
t.13->%rax
t.69->%rbx
t.70->%rcx
t.15->%rcx
t.71->%rbx
t.16->%rbx
t.14->%rdx
t.72->%rsi
t.73->%rdx
t.74->%rbx
t.75->%rax
t.76->%rax
t.17->%rax
t.77->%rbx
t.18->%rax
t.78->%rdi
t.19->%rdi
t.79->%rdi
t.47->%rax
t.80->%rax
t.81->%rax
t.20->%rax
t.82->%rbx
t.21->%rax
t.83->%rdi
t.22->%rdi
t.84->%rdi
t.48->%rax
t.49->%rax
t.50->%rax
t.85->%rax
t.86->%rax
t.23->%rax
t.87->%rbx
t.24->%rax
t.88->%rdi
t.25->%rdi
t.89->%rdi
t.51->%rax
t.90->%rax
t.91->%rax
t.26->%rax
t.92->%rbx
t.27->%rax
t.93->%rdi
t.28->%rdi
t.52->%rax
t.53->%rax
t.54->%rax
# Assembly code:
	.text
ArraySize:
	pushq %rbp
	movq %rsp,%rbp
	subq $32,%rsp
	movq %r12, -16(%rbp)
	movq %rbx, -8(%rbp)
L.27:
	movq $5,%r12
	xorq %rax,%rax
	cmpq %rax,%r12
	jl ArraySize.badSub
L.11:
#	movq %r12,%r12
	movq $16,%rdi
	movq %r12,%rax
	imulq $5,%rax
#	movq %rdi,%rdi
	addq %rax,%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	call malloc
#	movq %rax,%rax
	movq %rax,%rbx
	addq $16,%rbx
	movq %rbx,0(%rax)
	movq %r12,8(%rax)
	movq 8(%rax),%rcx
#	movq %rcx,%rcx
	movq 0(%rax),%rbx
#	movq %rbx,%rbx
	xorq %r8,%r8
	cmpq %rcx,%r8
	jge L.14
L.12:
	movq $5,%r9
	xorq %rdx,%rdx
	cmpq %r9,%rdx
	jge L.16
L.15:
	movq %r8,%rdi
	imulq $5,%rdi
	movq %rbx,%rsi
	addq %rdi,%rsi
#	movq %rsi,%rsi
	addq %rdx,%rsi
	movb $0,0(%rsi)
#	movq %rdx,%rdx
	addq $1,%rdx
#	movq %rdx,%rdx
	cmpq %r9,%rdx
	jl L.15
L.16:
#	movq %r8,%r8
	addq $1,%r8
#	movq %r8,%r8
L.13:
	cmpq %rcx,%r8
	jl L.12
L.14:
	leaq ArraySize.x(%rip),%rbx
	movq %rax,0(%rbx)
	movq $5,%r12
	xorq %rax,%rax
	cmpq %rax,%r12
	jl ArraySize.badSub
L.17:
#	movq %r12,%r12
	movq $16,%rdi
#	movq %rdi,%rdi
	addq %r12,%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	call malloc
#	movq %rax,%rax
	movq %rax,%rbx
	addq $16,%rbx
	movq %rbx,0(%rax)
	movq %r12,8(%rax)
	movq 8(%rax),%rcx
#	movq %rcx,%rcx
	movq 0(%rax),%rbx
#	movq %rbx,%rbx
	xorq %rdx,%rdx
	cmpq %rcx,%rdx
	jge L.20
L.18:
	movq %rbx,%rsi
	addq %rdx,%rsi
	movb $0,0(%rsi)
#	movq %rdx,%rdx
	addq $1,%rdx
#	movq %rdx,%rdx
L.19:
	cmpq %rcx,%rdx
	jl L.18
L.20:
	leaq ArraySize.y(%rip),%rbx
	movq %rax,0(%rbx)
	leaq ArraySize.x(%rip),%rax
	movq 0(%rax),%rax
#	movq %rax,%rax
	xorq %rbx,%rbx
	cmpq %rbx,%rax
	je ArraySize.badPtr
L.21:
#	movq %rax,%rax
	movq 8(%rax),%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	imulq $40,%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	call ArraySize.println
#	movq %rax,%rax
	leaq ArraySize.x(%rip),%rax
	movq 0(%rax),%rax
#	movq %rax,%rax
	xorq %rbx,%rbx
	cmpq %rbx,%rax
	je ArraySize.badPtr
L.22:
#	movq %rax,%rax
	movq 8(%rax),%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	imulq $5,%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	call ArraySize.println
#	movq %rax,%rax
	movq $40,%rdi
	call ArraySize.println
#	movq %rax,%rax
	movq $5,%rdi
	call ArraySize.println
#	movq %rax,%rax
	leaq ArraySize.y(%rip),%rax
	movq 0(%rax),%rax
#	movq %rax,%rax
	xorq %rbx,%rbx
	cmpq %rbx,%rax
	je ArraySize.badPtr
L.23:
#	movq %rax,%rax
	movq 8(%rax),%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	shlq $3,%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	call ArraySize.println
#	movq %rax,%rax
	leaq ArraySize.y(%rip),%rax
	movq 0(%rax),%rax
#	movq %rax,%rax
	xorq %rbx,%rbx
	cmpq %rbx,%rax
	je ArraySize.badPtr
L.24:
#	movq %rax,%rax
	movq 8(%rax),%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
#	movq %rdi,%rdi
	call ArraySize.println
#	movq %rax,%rax
	movq $3,%rdi
	call ArraySize.println
#	movq %rax,%rax
	movq $1,%rdi
	call ArraySize.println
#	movq %rax,%rax
#	returnSink
	movq -8(%rbp),%rbx
	movq -16(%rbp),%r12
	addq $32,%rsp
	popq %rbp
	ret
ArraySize.badPtr:
	call badPtr
ArraySize.badSub:
	call badSub
END ArraySize
