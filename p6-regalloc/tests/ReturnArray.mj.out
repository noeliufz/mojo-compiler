PROCEDURE ReturnArray.foo
# Trees:
MOVE(
 TEMP t.1,
 CONST 3),
MOVE(
 TEMP t.0,
 CONST 0),
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1),
LABEL L.1,
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -24, 8, true, false),
 CONST 0),
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1)),
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2),
LABEL L.2,
MOVE(
 TEMP t.2,
 CONST 0),
MOVE(
 TEMP t.3,
 CONST 2),
MOVE(
 TEMP t.4,
 CONST 1),
LABEL L.3,
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2),
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP ReturnArray.foo.1.1.i,
    CONST 8)), 
  CONST -24, 8, true, false),
 TEMP ReturnArray.foo.1.1.i),
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4)),
LABEL L.4,
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5),
LABEL L.5,
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false)),
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -24),
  CONST 24)),
MOVE(
 TEMP %rax,
 TEMP t.5),
JUMP(
 NAME L.0),
LABEL L.0
# Linearized (trees):
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -24, 8, true, false),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP ReturnArray.foo.1.1.i,
    CONST 8)), 
  CONST -24, 8, true, false),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false))
MOVE(
 TEMP t.6,
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -24),
  CONST 24))
EXP(
 TEMP t.6)
MOVE(
 TEMP %rax,
 TEMP t.5)
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.6
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
# 1
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -24, 8, true, false),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
# 2
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
JUMP(
 NAME L.3)
# 3
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP ReturnArray.foo.1.1.i,
    CONST 8)), 
  CONST -24, 8, true, false),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
JUMP(
 NAME L.4)
# 4
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
# 5
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false))
MOVE(
 TEMP t.6,
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -24),
  CONST 24))
EXP(
 TEMP t.6)
MOVE(
 TEMP %rax,
 TEMP t.5)
JUMP(
 NAME L.0)
# 6
LABEL L.0
# Trace Scheduled:
LABEL L.6
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -24, 8, true, false),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP ReturnArray.foo.1.1.i,
    CONST 8)), 
  CONST -24, 8, true, false),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false))
MOVE(
 TEMP t.6,
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -24),
  CONST 24))
EXP(
 TEMP t.6)
MOVE(
 TEMP %rax,
 TEMP t.5)
LABEL L.0
# With procedure entry/exit:
MOVE(
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false),
 TEMP %rdi)
LABEL L.6
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -24, 8, true, false),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP ReturnArray.foo.1.1.i,
    CONST 8)), 
  CONST -24, 8, true, false),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST 16, 8, false, false))
MOVE(
 TEMP t.6,
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -24),
  CONST 24))
EXP(
 TEMP t.6)
MOVE(
 TEMP %rax,
 TEMP t.5)
LABEL L.0
# Instructions:
	movq %rdi,16(%rbp)	# <- %rbp %rdi 
L.6:	# <- 
	movq $3,t.1	# t.1 <- 
	xorq t.0,t.0	# t.0 <- 
	cmpq t.1,t.0	# <- t.0 t.1 
	jge L.2	# <- : goto L.2 L.1 
L.1:	# <- 
	movq $0,-24(%rbp,t.0,8)	# <- %rbp t.0 
	movq t.0,t.7	# t.7 := t.0 
	addq $1,t.7	# t.7 <- t.7 
	movq t.7,t.0	# t.0 := t.7 
	cmpq t.1,t.0	# <- t.0 t.1 
	jl L.1	# <- : goto L.1 L.2 
L.2:	# <- 
	xorq t.2,t.2	# t.2 <- 
	movq $2,t.3	# t.3 <- 
	movq $1,t.4	# t.4 <- 
L.3:	# <- 
	movq t.2,ReturnArray.foo.1.1.i	# ReturnArray.foo.1.1.i := t.2 
	movq ReturnArray.foo.1.1.i,-24(%rbp,ReturnArray.foo.1.1.i,8)	# <- %rbp ReturnArray.foo.1.1.i ReturnArray.foo.1.1.i 
	movq t.2,t.8	# t.8 := t.2 
	addq t.4,t.8	# t.8 <- t.4 t.8 
	movq t.8,t.2	# t.2 := t.8 
L.4:	# <- 
	cmpq t.3,t.2	# <- t.2 t.3 
	jle L.3	# <- : goto L.3 L.5 
L.5:	# <- 
	movq 16(%rbp),t.9	# t.9 <- %rbp 
	movq t.9,t.5	# t.5 := t.9 
	movq t.5,%rdi	# %rdi := t.5 
	movq %rbp,t.10	# t.10 := %rbp 
	addq $-24,t.10	# t.10 <- t.10 
	movq t.10,%rsi	# %rsi := t.10 
	movq $24,%rdx	# %rdx <- 
	call memmove	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi %rsi %rdx 
	movq %rax,t.6	# t.6 := %rax 
	movq t.5,%rax	# %rax := t.5 
L.0:	# <- 
# Control Flow Graph:
0: <- %rbp %rdi; goto 1
1: t.1 t.0 <-; goto 3 2
2: t.7 t.0 <- %rbp t.0 t.1; goto 2 3
3: t.2 t.3 t.4 <-; goto 4
4: ReturnArray.foo.1.1.i t.8 t.2 <- t.2 %rbp t.4; goto 5
5: <- t.2 t.3; goto 4 6
6: t.9 t.5 %rdi t.10 %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.6 <- %rbp; goto 7
7: <- %rsp %rbp %rax; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.1: t.0 %rbp %rsp t.7 
t.0: %rbp %rsp t.1 
t.7: %rbp t.1 %rsp 
t.2: t.4 t.3 %rbp %rsp 
t.3: t.4 t.2 %rbp %rsp t.8 ReturnArray.foo.1.1.i 
t.4: t.2 %rbp t.3 %rsp t.8 ReturnArray.foo.1.1.i 
ReturnArray.foo.1.1.i: t.3 %rbp t.4 %rsp 
t.8: t.3 %rbp t.4 %rsp 
t.9: %rsp %rbp 
t.5: t.6 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.10 %rsp %rbp 
t.10: %rsp %rbp t.5 %rdi 
t.6: %rsp %rbp t.5 
t.5 <= t.9
%rdi <= t.5
t.10 <= %rbp
%rsi <= t.10
t.6 <= %rax
%rax <= t.5
ReturnArray.foo.1.1.i <= t.2
t.8 <= t.2
t.2 <= t.8
t.7 <= t.0
t.0 <= t.7
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.1->%rbx
t.0->%rax
t.7->%rax
t.2->%rax
t.3->%rcx
t.4->%rbx
ReturnArray.foo.1.1.i->%rax
t.8->%rax
t.9->%rbx
t.5->%rbx
t.10->%rsi
t.6->%rax
# Assembly code:
	.text
ReturnArray.foo:
	pushq %rbp
	movq %rsp,%rbp
	subq $64,%rsp
	movq %rbx, -32(%rbp)
	movq %rdi,16(%rbp)
L.6:
	movq $3,%rbx
	xorq %rax,%rax
	cmpq %rbx,%rax
	jge L.2
L.1:
	movq $0,-24(%rbp,%rax,8)
#	movq %rax,%rax
	addq $1,%rax
#	movq %rax,%rax
	cmpq %rbx,%rax
	jl L.1
L.2:
	xorq %rax,%rax
	movq $2,%rcx
	movq $1,%rbx
L.3:
#	movq %rax,%rax
	movq %rax,-24(%rbp,%rax,8)
#	movq %rax,%rax
	addq %rbx,%rax
#	movq %rax,%rax
L.4:
	cmpq %rcx,%rax
	jle L.3
L.5:
	movq 16(%rbp),%rbx
#	movq %rbx,%rbx
	movq %rbx,%rdi
	movq %rbp,%rsi
	addq $-24,%rsi
#	movq %rsi,%rsi
	movq $24,%rdx
	call memmove
#	movq %rax,%rax
	movq %rbx,%rax
L.0:
#	returnSink
	movq -32(%rbp),%rbx
	addq $64,%rsp
	popq %rbp
	ret
ReturnArray.foo.badSub:
	call badSub
END ReturnArray.foo
PROCEDURE ReturnArray
# Trees:
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  CALL(
   NAME ReturnArray.foo,
   CONST 0,
   ADD(
    TEMP %rbp,
    CONST -48)),
  CONST 24)),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8, true, false)))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10)),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8, true, false)))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10)),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8, true, false)))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
# Linearized (trees):
MOVE(
 TEMP t.12,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
MOVE(
 TEMP t.11,
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.12,
  CONST 24))
EXP(
 TEMP t.11)
MOVE(
 TEMP t.13,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8, true, false))))
EXP(
 TEMP t.13)
MOVE(
 TEMP t.14,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.14)
MOVE(
 TEMP t.15,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8, true, false))))
EXP(
 TEMP t.15)
MOVE(
 TEMP t.16,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.16)
MOVE(
 TEMP t.17,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8, true, false))))
EXP(
 TEMP t.17)
MOVE(
 TEMP t.18,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.18)
# Basic Blocks:
# 0
LABEL L.7
MOVE(
 TEMP t.12,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
MOVE(
 TEMP t.11,
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.12,
  CONST 24))
EXP(
 TEMP t.11)
MOVE(
 TEMP t.13,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8, true, false))))
EXP(
 TEMP t.13)
MOVE(
 TEMP t.14,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.14)
MOVE(
 TEMP t.15,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8, true, false))))
EXP(
 TEMP t.15)
MOVE(
 TEMP t.16,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.16)
MOVE(
 TEMP t.17,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8, true, false))))
EXP(
 TEMP t.17)
MOVE(
 TEMP t.18,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.18)
# Trace Scheduled:
LABEL L.7
MOVE(
 TEMP t.12,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
MOVE(
 TEMP t.11,
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.12,
  CONST 24))
EXP(
 TEMP t.11)
MOVE(
 TEMP t.13,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8, true, false))))
EXP(
 TEMP t.13)
MOVE(
 TEMP t.14,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.14)
MOVE(
 TEMP t.15,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8, true, false))))
EXP(
 TEMP t.15)
MOVE(
 TEMP t.16,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.16)
MOVE(
 TEMP t.17,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8, true, false))))
EXP(
 TEMP t.17)
MOVE(
 TEMP t.18,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.18)
# With procedure entry/exit:
LABEL L.7
MOVE(
 TEMP t.12,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
MOVE(
 TEMP t.11,
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.12,
  CONST 24))
EXP(
 TEMP t.11)
MOVE(
 TEMP t.13,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8, true, false))))
EXP(
 TEMP t.13)
MOVE(
 TEMP t.14,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.14)
MOVE(
 TEMP t.15,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8, true, false))))
EXP(
 TEMP t.15)
MOVE(
 TEMP t.16,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.16)
MOVE(
 TEMP t.17,
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8, true, false))))
EXP(
 TEMP t.17)
MOVE(
 TEMP t.18,
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 TEMP t.18)
# Instructions:
L.7:	# <- 
	movq %rbp,t.19	# t.19 := %rbp 
	addq $-48,t.19	# t.19 <- t.19 
	movq t.19,%rdi	# %rdi := t.19 
	call ReturnArray.foo	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.12	# t.12 := %rax 
	movq %rbp,t.20	# t.20 := %rbp 
	addq $-24,t.20	# t.20 <- t.20 
	movq t.20,%rdi	# %rdi := t.20 
	movq t.12,%rsi	# %rsi := t.12 
	movq $24,%rdx	# %rdx <- 
	call memmove	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi %rsi %rdx 
	movq %rax,t.11	# t.11 := %rax 
	movq -24(%rbp),t.21	# t.21 <- %rbp 
	movq t.21,t.22	# t.22 := t.21 
	addq $48,t.22	# t.22 <- t.22 
	movq t.22,%rdi	# %rdi := t.22 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.13	# t.13 := %rax 
	movq $10,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.14	# t.14 := %rax 
	movq -16(%rbp),t.23	# t.23 <- %rbp 
	movq t.23,t.24	# t.24 := t.23 
	addq $48,t.24	# t.24 <- t.24 
	movq t.24,%rdi	# %rdi := t.24 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.15	# t.15 := %rax 
	movq $10,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.16	# t.16 := %rax 
	movq -8(%rbp),t.25	# t.25 <- %rbp 
	movq t.25,t.26	# t.26 := t.25 
	addq $48,t.26	# t.26 <- t.26 
	movq t.26,%rdi	# %rdi := t.26 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.17	# t.17 := %rax 
	movq $10,%rdi	# %rdi <- 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.18	# t.18 := %rax 
# Control Flow Graph:
0: t.19 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.12 t.20 t.11 t.21 t.22 t.13 t.14 t.23 t.24 t.15 t.16 t.25 t.26 t.17 t.18 <- %rbp %rsp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.19: %rsp %rbp 
t.12: %rdi t.20 %rsp %rbp 
t.20: %rsp %rbp t.12 
t.11: %rsp %rbp 
t.21: %rsp %rbp 
t.22: %rsp %rbp 
t.13: %rsp %rbp 
t.14: %rsp %rbp 
t.23: %rsp %rbp 
t.24: %rsp %rbp 
t.15: %rsp %rbp 
t.16: %rsp %rbp 
t.25: %rsp %rbp 
t.26: %rsp %rbp 
t.17: %rsp %rbp 
t.18: %rsp %rbp 
t.19 <= %rbp
%rdi <= t.19
t.12 <= %rax
t.20 <= %rbp
%rdi <= t.20
%rsi <= t.12
t.11 <= %rax
t.22 <= t.21
%rdi <= t.22
t.13 <= %rax
t.14 <= %rax
t.24 <= t.23
%rdi <= t.24
t.15 <= %rax
t.16 <= %rax
t.26 <= t.25
%rdi <= t.26
t.17 <= %rax
t.18 <= %rax
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.19->%rdi
t.12->%rax
t.20->%rdi
t.11->%rax
t.21->%rdi
t.22->%rdi
t.13->%rax
t.14->%rax
t.23->%rdi
t.24->%rdi
t.15->%rax
t.16->%rax
t.25->%rdi
t.26->%rdi
t.17->%rax
t.18->%rax
# Assembly code:
	.text
ReturnArray:
	pushq %rbp
	movq %rsp,%rbp
	subq $80,%rsp
L.7:
	movq %rbp,%rdi
	addq $-48,%rdi
#	movq %rdi,%rdi
	call ReturnArray.foo
#	movq %rax,%rax
	movq %rbp,%rdi
	addq $-24,%rdi
#	movq %rdi,%rdi
	movq %rax,%rsi
	movq $24,%rdx
	call memmove
#	movq %rax,%rax
	movq -24(%rbp),%rdi
#	movq %rdi,%rdi
	addq $48,%rdi
#	movq %rdi,%rdi
	call putchar
#	movq %rax,%rax
	movq $10,%rdi
	call putchar
#	movq %rax,%rax
	movq -16(%rbp),%rdi
#	movq %rdi,%rdi
	addq $48,%rdi
#	movq %rdi,%rdi
	call putchar
#	movq %rax,%rax
	movq $10,%rdi
	call putchar
#	movq %rax,%rax
	movq -8(%rbp),%rdi
#	movq %rdi,%rdi
	addq $48,%rdi
#	movq %rdi,%rdi
	call putchar
#	movq %rax,%rax
	movq $10,%rdi
	call putchar
#	movq %rax,%rax
#	returnSink
	addq $80,%rsp
	popq %rbp
	ret
ReturnArray.badSub:
	call badSub
END ReturnArray
