PROCEDURE ReturnProc.retProc
# Trees:
MOVE(
 TEMP %rax,
 ESEQ(
  MOVE(
   TEMP t.0,
   TEMP ReturnProc.retProc.p),
  BEQ(
   MEM(
    TEMP t.0, 
    CONST 0, 8, false, false),
   CONST -1,
   ReturnProc.retProc.badPtr, L.1),
  LABEL L.1,
  TEMP t.0)),
JUMP(
 NAME L.0),
LABEL L.0
# Linearized (trees):
MOVE(
 TEMP t.0,
 TEMP ReturnProc.retProc.p)
BEQ(
 MEM(
  TEMP t.0, 
  CONST 0, 8, false, false),
 CONST -1,
 ReturnProc.retProc.badPtr, L.1)
LABEL L.1
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
# 0
LABEL L.2
MOVE(
 TEMP t.0,
 TEMP ReturnProc.retProc.p)
BEQ(
 MEM(
  TEMP t.0, 
  CONST 0, 8, false, false),
 CONST -1,
 ReturnProc.retProc.badPtr, L.1)
# 1
LABEL L.1
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
# 2
LABEL L.0
# Trace Scheduled:
LABEL L.2
MOVE(
 TEMP t.0,
 TEMP ReturnProc.retProc.p)
BEQ(
 MEM(
  TEMP t.0, 
  CONST 0, 8, false, false),
 CONST -1,
 ReturnProc.retProc.badPtr, L.1)
LABEL L.1
MOVE(
 TEMP %rax,
 TEMP t.0)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP ReturnProc.retProc.p,
 TEMP %rdi)
LABEL L.2
MOVE(
 TEMP t.0,
 TEMP ReturnProc.retProc.p)
BEQ(
 MEM(
  TEMP t.0, 
  CONST 0, 8, false, false),
 CONST -1,
 ReturnProc.retProc.badPtr, L.1)
LABEL L.1
MOVE(
 TEMP %rax,
 TEMP t.0)
LABEL L.0
# Instructions:
	movq %rdi,ReturnProc.retProc.p	# ReturnProc.retProc.p := %rdi 
L.2:	# <- 
	movq ReturnProc.retProc.p,t.0	# t.0 := ReturnProc.retProc.p 
	movq 0(t.0),t.1	# t.1 <- t.0 
	movq $-1,t.2	# t.2 <- 
	cmpq t.2,t.1	# <- t.1 t.2 
	je ReturnProc.retProc.badPtr	# <- : goto ReturnProc.retProc.badPtr L.1 
L.1:	# <- 
	movq t.0,%rax	# %rax := t.0 
L.0:	# <- 
# Control Flow Graph:
0: ReturnProc.retProc.p <- %rdi; goto 1
1: t.0 t.1 t.2 <- ReturnProc.retProc.p; goto 2
2: %rax <- t.0; goto 3
3: <- %rsp %rbp %rax; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
ReturnProc.retProc.p: %rsp %rbp 
t.0: t.2 t.1 %rsp %rbp 
t.1: t.2 t.0 %rsp %rbp 
t.2: t.0 %rsp %rbp t.1 
%rax <= t.0
t.0 <= ReturnProc.retProc.p
ReturnProc.retProc.p <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
ReturnProc.retProc.p->%rax
t.0->%rax
t.1->%rcx
t.2->%rbx
# Assembly code:
	.text
ReturnProc.retProc:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rax
L.2:
#	movq %rax,%rax
	movq 0(%rax),%rcx
	movq $-1,%rbx
	cmpq %rbx,%rcx
	je ReturnProc.retProc.badPtr
L.1:
#	movq %rax,%rax
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
ReturnProc.retProc.badPtr:
	call badPtr
END ReturnProc.retProc
PROCEDURE ReturnProc
# Trees:
# Linearized (trees):
# Basic Blocks:
# 0
LABEL L.3
# Trace Scheduled:
LABEL L.3
# With procedure entry/exit:
LABEL L.3
# Instructions:
L.3:	# <- 
# Control Flow Graph:
0: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
ReturnProc:
	pushq %rbp
	movq %rsp,%rbp
L.3:
#	returnSink
	popq %rbp
	ret
END ReturnProc
