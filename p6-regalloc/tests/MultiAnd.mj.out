PROCEDURE MultiAnd.MultiAnd
# Trees:
BEQ(
 TEMP MultiAnd.MultiAnd.x,
 CONST 0,
 L.4, L.2),
LABEL L.4,
BEQ(
 TEMP MultiAnd.MultiAnd.y,
 CONST 1,
 L.3, L.2),
LABEL L.3,
BEQ(
 TEMP MultiAnd.MultiAnd.z,
 CONST 2,
 L.1, L.2),
LABEL L.1,
LABEL L.2,
LABEL L.0
# Linearized (trees):
BEQ(
 TEMP MultiAnd.MultiAnd.x,
 CONST 0,
 L.4, L.2)
LABEL L.4
BEQ(
 TEMP MultiAnd.MultiAnd.y,
 CONST 1,
 L.3, L.2)
LABEL L.3
BEQ(
 TEMP MultiAnd.MultiAnd.z,
 CONST 2,
 L.1, L.2)
LABEL L.1
LABEL L.2
LABEL L.0
# Basic Blocks:
# 0
LABEL L.5
BEQ(
 TEMP MultiAnd.MultiAnd.x,
 CONST 0,
 L.4, L.2)
# 1
LABEL L.4
BEQ(
 TEMP MultiAnd.MultiAnd.y,
 CONST 1,
 L.3, L.2)
# 2
LABEL L.3
BEQ(
 TEMP MultiAnd.MultiAnd.z,
 CONST 2,
 L.1, L.2)
# 3
LABEL L.1
JUMP(
 NAME L.2)
# 4
LABEL L.2
JUMP(
 NAME L.0)
# 5
LABEL L.0
# Trace Scheduled:
LABEL L.5
BEQ(
 TEMP MultiAnd.MultiAnd.x,
 CONST 0,
 L.4, L.2)
LABEL L.2
JUMP(
 NAME L.0)
LABEL L.4
BNE(
 TEMP MultiAnd.MultiAnd.y,
 CONST 1,
 L.2, L.3)
LABEL L.3
BNE(
 TEMP MultiAnd.MultiAnd.z,
 CONST 2,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.2)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP MultiAnd.MultiAnd.z,
 TEMP %rdx)
MOVE(
 TEMP MultiAnd.MultiAnd.y,
 TEMP %rsi)
MOVE(
 TEMP MultiAnd.MultiAnd.x,
 TEMP %rdi)
LABEL L.5
BEQ(
 TEMP MultiAnd.MultiAnd.x,
 CONST 0,
 L.4, L.2)
LABEL L.2
JUMP(
 NAME L.0)
LABEL L.4
BNE(
 TEMP MultiAnd.MultiAnd.y,
 CONST 1,
 L.2, L.3)
LABEL L.3
BNE(
 TEMP MultiAnd.MultiAnd.z,
 CONST 2,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.2)
LABEL L.0
# Instructions:
	movq %rdx,MultiAnd.MultiAnd.z	# MultiAnd.MultiAnd.z := %rdx 
	movq %rsi,MultiAnd.MultiAnd.y	# MultiAnd.MultiAnd.y := %rsi 
	movq %rdi,MultiAnd.MultiAnd.x	# MultiAnd.MultiAnd.x := %rdi 
L.5:	# <- 
	xorq t.0,t.0	# t.0 <- 
	cmpq t.0,MultiAnd.MultiAnd.x	# <- MultiAnd.MultiAnd.x t.0 
	je L.4	# <- : goto L.4 L.2 
L.2:	# <- 
	jmp L.0	# <- : goto L.0 
L.4:	# <- 
	movq $1,t.1	# t.1 <- 
	cmpq t.1,MultiAnd.MultiAnd.y	# <- MultiAnd.MultiAnd.y t.1 
	jne L.2	# <- : goto L.2 L.3 
L.3:	# <- 
	movq $2,t.2	# t.2 <- 
	cmpq t.2,MultiAnd.MultiAnd.z	# <- MultiAnd.MultiAnd.z t.2 
	jne L.2	# <- : goto L.2 L.1 
L.1:	# <- 
	jmp L.2	# <- : goto L.2 
L.0:	# <- 
# Control Flow Graph:
0: MultiAnd.MultiAnd.z MultiAnd.MultiAnd.y MultiAnd.MultiAnd.x <- %rdx %rsi %rdi; goto 1
1: t.0 <- MultiAnd.MultiAnd.x; goto 3 2
2: <-; goto 6
3: t.1 <- MultiAnd.MultiAnd.y; goto 2 4
4: t.2 <- MultiAnd.MultiAnd.z; goto 2 5
5: <-; goto 2
6: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
MultiAnd.MultiAnd.z: MultiAnd.MultiAnd.x MultiAnd.MultiAnd.y %rsp %rbp %rdi %rsi t.0 t.1 t.2 
MultiAnd.MultiAnd.y: MultiAnd.MultiAnd.x MultiAnd.MultiAnd.z %rsp %rbp %rdi t.0 t.1 
MultiAnd.MultiAnd.x: MultiAnd.MultiAnd.y MultiAnd.MultiAnd.z %rsp %rbp t.0 
t.0: MultiAnd.MultiAnd.y MultiAnd.MultiAnd.z %rsp %rbp MultiAnd.MultiAnd.x 
t.1: MultiAnd.MultiAnd.z %rsp %rbp MultiAnd.MultiAnd.y 
t.2: %rsp %rbp MultiAnd.MultiAnd.z 
MultiAnd.MultiAnd.z <= %rdx
MultiAnd.MultiAnd.y <= %rsi
MultiAnd.MultiAnd.x <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
MultiAnd.MultiAnd.z->%rdx
MultiAnd.MultiAnd.y->%rsi
MultiAnd.MultiAnd.x->%rdi
t.0->%rax
t.1->%rax
t.2->%rax
# Assembly code:
	.text
MultiAnd.MultiAnd:
	pushq %rbp
	movq %rsp,%rbp
#	movq %rdx,%rdx
#	movq %rsi,%rsi
#	movq %rdi,%rdi
L.5:
	xorq %rax,%rax
	cmpq %rax,%rdi
	je L.4
L.2:
	jmp L.0
L.4:
	movq $1,%rax
	cmpq %rax,%rsi
	jne L.2
L.3:
	movq $2,%rax
	cmpq %rax,%rdx
	jne L.2
L.1:
	jmp L.2
L.0:
#	returnSink
	popq %rbp
	ret
END MultiAnd.MultiAnd
PROCEDURE MultiAnd
# Trees:
# Linearized (trees):
# Basic Blocks:
# 0
LABEL L.6
# Trace Scheduled:
LABEL L.6
# With procedure entry/exit:
LABEL L.6
# Instructions:
L.6:	# <- 
# Control Flow Graph:
0: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
MultiAnd:
	pushq %rbp
	movq %rsp,%rbp
L.6:
#	returnSink
	popq %rbp
	ret
END MultiAnd
