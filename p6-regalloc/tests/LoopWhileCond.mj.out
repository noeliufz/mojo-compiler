PROCEDURE LoopWhileCond
# Trees:
LABEL L.0,
BEQ(
 CONST 1,
 CONST 0,
 L.2, L.1),
LABEL L.1,
JUMP(
 NAME L.0),
LABEL L.2
# Linearized (trees):
LABEL L.0
BEQ(
 CONST 1,
 CONST 0,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.0)
LABEL L.2
# Basic Blocks:
# 0
LABEL L.0
BEQ(
 CONST 1,
 CONST 0,
 L.2, L.1)
# 1
LABEL L.1
JUMP(
 NAME L.0)
# 2
LABEL L.2
# Trace Scheduled:
LABEL L.0
BEQ(
 CONST 1,
 CONST 0,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.0)
LABEL L.2
# With procedure entry/exit:
LABEL L.0
BEQ(
 CONST 1,
 CONST 0,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.0)
LABEL L.2
# Instructions:
L.0:	# <- 
	movq $1,t.0	# t.0 <- 
	xorq t.1,t.1	# t.1 <- 
	cmpq t.1,t.0	# <- t.0 t.1 
	je L.2	# <- : goto L.2 L.1 
L.1:	# <- 
	jmp L.0	# <- : goto L.0 
L.2:	# <- 
# Control Flow Graph:
0: t.0 t.1 <-; goto 2 1
1: <-; goto 0
2: <- %rsp %rbp; goto
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.0: t.1 %rsp %rbp 
t.1: %rsp %rbp t.0 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.0->%rbx
t.1->%rax
# Assembly code:
	.text
LoopWhileCond:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
L.0:
	movq $1,%rbx
	xorq %rax,%rax
	cmpq %rax,%rbx
	je L.2
L.1:
	jmp L.0
L.2:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END LoopWhileCond
